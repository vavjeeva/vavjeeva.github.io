<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jeeva Subburaj - Programmer, Blogger</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://jeevasubburaj.com/"/>
  <updated>2019-03-15T17:31:27.925Z</updated>
  <id>https://jeevasubburaj.com/</id>
  
  <author>
    <name>Jeeva Subburaj</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>C# Hidden Gems – Discards Variable ( _ )</title>
    <link href="https://jeevasubburaj.com/2019/01/24/c-hidden-gems-discards-variable/"/>
    <id>https://jeevasubburaj.com/2019/01/24/c-hidden-gems-discards-variable/</id>
    <published>2019-01-24T21:22:00.001Z</published>
    <updated>2019-03-15T17:31:27.925Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://2.bp.blogspot.com/-rqQnFUnKWBI/XEot77TvMRI/AAAAAAAHHu8/igGZty5vX5kFIHGTyzLC-O2-ZqqQR8CbACLcBGAs/s640/hidden_gem_discards_featured.png" alt></p><p>This will be one of my series of multiple blog posts to explore some of the hidden gems of C# features. Hidden gems are surprisingly useful feature but not being used much by common developers.  </p><p>From version 7.0, C# introduced the new feature called <a href="https://docs.microsoft.com/en-us/dotnet/csharp/discards" target="_blank" rel="noopener">discards</a> to create dummy variable defined by underscore character _. Discards are equal to unassigned variables. The purpose of this feature is to use this variable when you want to intentionally skip the value by not creating variable explicitly.  </p><a id="more"></a><p>For example, if you are calling the method and it returns the object but caller is only interested in calling the method but not interested in the return object. In such case, we can use discards variable so that it can reduce in terms of memory allocation and make your code clear as well.  </p><h2 id="How-to-use"><a href="#How-to-use" class="headerlink" title="How to use"></a>How to use</h2><p>Every developer would have come across the scenarios like checking the given string is valid datetime object or not by using <a href="https://docs.microsoft.com/en-us/dotnet/api/system.datetime.tryparse?view=netframework-4.7.2" target="_blank" rel="noopener">tryparse</a> method. However, tryparse method expects the out parameter to produce the datetime result in addtion to returing the boolean result so we must declare datetime result variable to use it in out parameter even if we dont use it. This would be ideal situation to use discards variable if we are not going to use the result object.  </p><h4 id="Without-Discards-Variable"><a href="#Without-Discards-Variable" class="headerlink" title="Without Discards Variable"></a>Without Discards Variable</h4><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">DateTime result;  </span><br><span class="line"><span class="keyword">if</span> (DateTime.TryParse(<span class="string">"02/29/2019"</span>, <span class="keyword">out</span> result))  </span><br><span class="line">&#123;  </span><br><span class="line">    Console.WriteLine(<span class="string">"Date is valid"</span>);  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="keyword">else</span>  </span><br><span class="line">&#123;  </span><br><span class="line">    Console.WriteLine(<span class="string">"Date is not valid"</span>);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In the example above, we never used result object. we are just checking the given string is valid datetime or not.   </p><h4 id="With-discards"><a href="#With-discards" class="headerlink" title="With discards"></a>With discards</h4><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (DateTime.TryParse(<span class="string">"02/29/2019"</span>, <span class="keyword">out</span> _))  </span><br><span class="line">&#123;  </span><br><span class="line">    Console.WriteLine(<span class="string">"Date is valid"</span>);  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="keyword">else</span>  </span><br><span class="line">&#123;  </span><br><span class="line">    Console.WriteLine(<span class="string">"Date is not valid"</span>);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>With discards variable, we can completely ignore the result variable.  </p><p>If we want to ignore the return result and interested in actual result object only, we can do the above example as below.<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_ = DateTime.TryParse(<span class="string">"02/29/2019"</span>, <span class="keyword">out</span> result);</span><br></pre></td></tr></table></figure></p><h2 id="Additional-Points"><a href="#Additional-Points" class="headerlink" title="Additional Points"></a>Additional Points</h2><ul><li><p>Discards variable introduced in C# 7. So, it will work only on version 7 and above.</p></li><li><p>If you have value tuple that expects multiple values and you are interested in one or two values, you can use discards without creating other variables. For example,  <strong>var (a, _, _) = (1, 2, 3)  </strong></p></li><li>In Async programming if we use Task.Run method to call some methods and not interested in return result. For example,  <strong>_ = Task.Run(() =&gt; { }</strong></li></ul><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>The discards in C# provides a way to ignore local variables if not used instead of creating it. I think this is a very nice hidden feature of c# that people may not be using it very often. I will keep sharing more of hidden gems in my upcoming blogs. If you have something to share, please do post it in comments section.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://2.bp.blogspot.com/-rqQnFUnKWBI/XEot77TvMRI/AAAAAAAHHu8/igGZty5vX5kFIHGTyzLC-O2-ZqqQR8CbACLcBGAs/s640/hidden_gem_discards_featured.png&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;This will be one of my series of multiple blog posts to explore some of the hidden gems of C# features. Hidden gems are surprisingly useful feature but not being used much by common developers.  &lt;/p&gt;
&lt;p&gt;From version 7.0, C# introduced the new feature called &lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/csharp/discards&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;discards&lt;/a&gt; to create dummy variable defined by underscore character _. Discards are equal to unassigned variables. The purpose of this feature is to use this variable when you want to intentionally skip the value by not creating variable explicitly.  &lt;/p&gt;
    
    </summary>
    
    
      <category term="C#" scheme="https://jeevasubburaj.com/tags/C/"/>
    
      <category term="HiddenGems" scheme="https://jeevasubburaj.com/tags/HiddenGems/"/>
    
  </entry>
  
  <entry>
    <title> Containerizing N-Tier MVC .Net Framework Application with Docker</title>
    <link href="https://jeevasubburaj.com/2018/12/05/containerizing-n-tier-mvc-net-framework/"/>
    <id>https://jeevasubburaj.com/2018/12/05/containerizing-n-tier-mvc-net-framework/</id>
    <published>2018-12-05T19:29:00.002Z</published>
    <updated>2019-03-15T17:32:25.548Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://4.bp.blogspot.com/-ZUK-MZx0Kes/XAf7Cs4YGZI/AAAAAAAHA-s/O_Tr_UuqCwcuO_apmJX6af08u6qrqaaKgCLcBGAs/s640/title_image.png" alt><br>Microservice Architecture and Containerization using docker are the latest buzzword in the software industry. But, Many people including me in the software industry developing big monolithic enterprise applications using .Net Framework for many years have very limited scope of applying these concepts into existing applications. Because, its not easy to break enterprise monolithic application into micro service architecture without redesigning the application. Also, .Net Core framework would be the de facto choice for micro service architecture because it supports cross platform so it can be hosted in linux container or windows container. As of today, Windows Docker container do not support GUI application such as winforms, wpf etc.. However, we can still consider modernizing .Net Framework monolithic application by packaging into docker image for automated end to end testing or security testing.  </p><a id="more"></a><p>In this article, i will explain how to containerize a simple N-Tier CRUD MVC application using docker. We will create a separate app server and database server container images and deploy and run the simple N-Tier MVC application. If you are new to docker, i would recommend first to read <a href="https://twitter.com/sahilmalik" target="_blank" rel="noopener">Sahil Malik</a> article about <a href="https://www.codemag.com/Article/1811021/Docker-for-Developers" target="_blank" rel="noopener">docker for developers</a> and watch the awesome pluralsight course of <a href="https://pluralsight.pxf.io/c/1197078/424552/7490?u=https%3A%2F%2Fwww.pluralsight.com%2Fcourses%2Fmodernizing-dotnet-framework-apps-docker" target="_blank" rel="noopener">Modernizing .NET Apps with Docker</a> by Elton Stoneman.  </p><h3 id="How-it-works"><a href="#How-it-works" class="headerlink" title="How it works"></a>How it works</h3><p>I took the <a href="https://code.msdn.microsoft.com/Applying-N-Tier-Deployment-56b6210c" target="_blank" rel="noopener">N-Tier Application on ASP.NET MVC - A Complete Solution</a> from MSDN Code web site that runs on full .Net Framework. This sample application does the basic CRUD operation for maintaining Employees data using Model-View-Controller Patter with Repository Pattern and N-Tiers Deployment Architecture Pattern. We will modernize this application by containerizing into docker image. This application will have separate database and application server instances. The database server will be based Docker version of <a href="https://hub.docker.com/r/microsoft/mssql-server-windows-developer/" target="_blank" rel="noopener">SQL Server Developer Edition</a> and application server is based on <a href="https://hub.docker.com/r/microsoft/aspnet/" target="_blank" rel="noopener">microsoft/aspnet:latest</a> docker image. Every time, when new container instance is created, new database will be created and all the data that were created in prior container instance will be destroyed when container instance is stopped which perfectly works for automated testing scenarios.  </p><h3 id="Steps"><a href="#Steps" class="headerlink" title="Steps"></a>Steps</h3><p>Now, i am going to explain about <strong>docker-compose</strong> file to orchestrate how to build and deploy .Net Framework application into docker container. Visual Studio provides the default container orchestration support for .Net Web Projects. You can add it by right click on the web project and select Container Orchestration Support as below.  </p><p><a href="https://4.bp.blogspot.com/-DoPZevXf3z8/XAdLbGU-PVI/AAAAAAAHA9M/omXHkpHJnaUzMDvZA5dGgx2uPw7IThPCgCEwYBhgL/s1600/Container_Orchestrator_Support.png" target="_blank" rel="noopener"><img src="https://4.bp.blogspot.com/-DoPZevXf3z8/XAdLbGU-PVI/AAAAAAAHA9M/omXHkpHJnaUzMDvZA5dGgx2uPw7IThPCgCEwYBhgL/s640/Container_Orchestrator_Support.png" alt></a></p><p><a href="https://3.bp.blogspot.com/-FPhnFeD4qTA/XAdLdVtPAcI/AAAAAAAHA-k/yZtpmgKRy7U-GxzOGVr342WSgoUMi2zsgCEwYBhgL/s1600/docker_compose.png" target="_blank" rel="noopener"><img src="https://3.bp.blogspot.com/-FPhnFeD4qTA/XAdLdVtPAcI/AAAAAAAHA-k/yZtpmgKRy7U-GxzOGVr342WSgoUMi2zsgCEwYBhgL/s1600/docker_compose.png" alt></a></p><p>However, i am not using the built-in container orchestration support feature for creating docker-compose file. I created it manually from scratch using visual studio code editor.  </p><h4 id="docker-compose"><a href="#docker-compose" class="headerlink" title="docker-compose"></a>docker-compose</h4><p>In the root folder of the project, create a new file called docker-compose.yml with the below code. I used visual studio code as my editor and it has great support for yaml file with intellisense.<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"><span class="attr">  docker_ntierdemo_app:</span>    </span><br><span class="line"><span class="attr">    image:</span> <span class="string">jeevasubburaj/dockerntierdemo_app:v1</span></span><br><span class="line"><span class="attr">    build:</span></span><br><span class="line"><span class="attr">      context:</span> <span class="string">./NtierMvc/bin/Release/Publish</span>          </span><br><span class="line"><span class="attr">    depends_on:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">docker_ntierdemo_db</span></span><br><span class="line"><span class="attr">    hostname:</span> <span class="string">$&#123;APP_UUID&#125;</span></span><br><span class="line"><span class="attr">    container_name:</span> <span class="string">$&#123;APP_UUID&#125;</span></span><br><span class="line"><span class="attr">    networks:</span> </span><br><span class="line"><span class="attr">      docker_ntierdemo-net:</span>        </span><br><span class="line"><span class="attr">        ipv4_address:</span> <span class="number">172.16</span><span class="number">.238</span><span class="number">.20</span>              </span><br><span class="line"><span class="attr">  docker_ntierdemo_db:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">jeevasubburaj/dockerntierdemo_db:v1</span>   </span><br><span class="line"><span class="attr">    build:</span>      </span><br><span class="line"><span class="attr">      context:</span> <span class="string">./Database</span> </span><br><span class="line"><span class="attr">    ports:</span> </span><br><span class="line"><span class="bullet">      -</span> <span class="string">"14333:1433"</span></span><br><span class="line"><span class="attr">    env_file:</span> <span class="string">db_dev.env</span>   </span><br><span class="line"><span class="attr">    hostname:</span> <span class="string">$&#123;DB_UUID&#125;</span></span><br><span class="line"><span class="attr">    container_name:</span> <span class="string">$&#123;DB_UUID&#125;</span>             </span><br><span class="line"><span class="attr">    networks:</span> </span><br><span class="line"><span class="attr">      docker_ntierdemo-net:</span>             </span><br><span class="line"><span class="attr">        ipv4_address:</span> <span class="number">172.16</span><span class="number">.238</span><span class="number">.21</span></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line"><span class="attr">  docker_ntierdemo-net:</span>       </span><br><span class="line"><span class="attr">    ipam:</span></span><br><span class="line"><span class="attr">      driver:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">      config:</span></span><br><span class="line"><span class="attr">        - subnet:</span> <span class="number">172.16</span><span class="number">.238</span><span class="number">.0</span><span class="string">/24</span></span><br></pre></td></tr></table></figure></p><p>Lets talk about each line in the above docker-compose file to understand what is going on. Before we take a deep dive into that, i would recommend you to read the official <a href="https://docs.docker.com/compose/" target="_blank" rel="noopener">docker-compose guide</a> from docker website.</p><pre><code>version: &apos;3&apos;</code></pre><p>This is the version of the docker-compose format that we use in this example.</p><pre><code>services: docker_ntierdemo_app:  .... docker_ntierdemo_db:</code></pre><p>Services definition contains configuration applied to each container started for that service. In our example, we will be creating application and db server services.  </p><p>Before we go into services in detail, we will discuss about how to create environment variables in docker-compose using .env file and custom env file. we are going to create some custom environment variable such as hostname, sql server login password etc to access it from docker-compose file.  </p><p>by default, you can set your environment variables using a  <strong>.env</strong>  file which docker-compose automatically looks for. if you want to create a custom environment file, you can also do that and reference that file inside the docker-compose file. In this example, i used both. In addition to that, you can also create the environment variable inside the docker-compose file without creating environment file.   </p><h3 id="env-file"><a href="#env-file" class="headerlink" title=".env file"></a>.env file</h3><pre><code>APP_UUID=Demo_App_ServerDB_UUID=Demo_Db_Server</code></pre><p>i have created the custom host name for both app and db server and i will be using these variables inside the docker-compose file. The same value is also configured in web.config so that app server will be connecting to db server.  </p><h3 id="db-dev-env"><a href="#db-dev-env" class="headerlink" title="db_dev.env"></a>db_dev.env</h3><pre><code>SA_PASSWORD=P@ssw0rdACCEPT_EULA=Y</code></pre><p>In this custom environment file, i have defined the default sa account password and accept EULA flag for the sql server to start inside the container.    </p><h3 id="Database-Server-Services"><a href="#Database-Server-Services" class="headerlink" title="Database Server Services"></a>Database Server Services</h3><pre><code>image: jeevasubburaj/dockerntierdemo_db:v1       build:            context: ./Database     ports:       - &quot;14333:1433&quot;    env_file: db_dev.env       hostname: ${DB_UUID}    container_name: ${DB_UUID}</code></pre><p>In the first line, i defined the name of the image with version number.  </p><p>Before we jump into build section, let us look at other references in that section. I mapped the default sql port 1433 from container into 14333 on host port using ports configuration so that you can connect the database from your host server with servername as <strong>localhost,14333</strong>. This step is optional only.  </p><p>we have also defined the <strong>hostname</strong> and <strong>container_name</strong> using environment variable. This will be needed to configure the database server name in our web.config, before we deploy the application in to the container.  </p><p>Build configurations are applied at docker build time. The context configuration defines the path to a directory containing the DockerFile. I created a new folder <strong>Database</strong> and placed the <strong>DockerFile</strong> and <strong>Database_Setup.sql</strong> file and pointing the context to that folder. When we build the docker image using docker-compose, it runs the DockerFile inside the Database Folder and build the database image. By Default, it will look for the file with name of DockerFile. if you want to create a custom DockerFile Name, you have to add dockerfile configuration to specify the custom docker file name.  </p><p><a href="https://2.bp.blogspot.com/-j5JKJhFFg4Q/XAdLbG3nTBI/AAAAAAAHA-k/xeC0Uy_Pd0YyyAGqpDdviQe6NG0gVfMpgCEwYBhgL/s1600/Database_Folder.png" target="_blank" rel="noopener"><img src="https://2.bp.blogspot.com/-j5JKJhFFg4Q/XAdLbG3nTBI/AAAAAAAHA-k/xeC0Uy_Pd0YyyAGqpDdviQe6NG0gVfMpgCEwYBhgL/s1600/Database_Folder.png" alt></a></p><h3 id="DockerFile"><a href="#DockerFile" class="headerlink" title="DockerFile"></a>DockerFile</h3><pre><code>FROM microsoft/mssql-server-windows-developer:latestCOPY ./Database_Setup.sql .RUN sqlcmd -i Database_Setup.sql</code></pre><p>This dockerfile gets the base image from sql server developer edition and copy the Database_Setup.sql into the image and execute the sql using sqlcmd command which will create the database and the tables defined in the sql file.</p><h3 id="Database-Setup-sql"><a href="#Database-Setup-sql" class="headerlink" title="Database_Setup.sql"></a>Database_Setup.sql</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">USE</span> [<span class="keyword">master</span>] </span><br><span class="line"><span class="keyword">GO</span> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> [NtierMvcDB] </span><br><span class="line"><span class="keyword">GO</span> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">USE</span> [NtierMvcDB] </span><br><span class="line"><span class="keyword">GO</span> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">SCHEMA</span> [HR] </span><br><span class="line"><span class="keyword">GO</span> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> [HR].[Employees] </span><br><span class="line">( </span><br><span class="line">    [<span class="keyword">Id</span>] [<span class="built_in">int</span>] <span class="keyword">NOT</span> <span class="literal">NULL</span>, </span><br><span class="line">    [<span class="keyword">Name</span>] [<span class="keyword">nvarchar</span>](<span class="number">50</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>, </span><br><span class="line">    [Age] [<span class="built_in">int</span>] <span class="keyword">NOT</span> <span class="literal">NULL</span>, </span><br><span class="line">    [HiringDate] [datetime] <span class="literal">NULL</span>, </span><br><span class="line">    [GrossSalary] [<span class="built_in">decimal</span>](<span class="number">10</span>, <span class="number">2</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>, </span><br><span class="line">    [ModifiedDate] [datetime] <span class="keyword">NOT</span> <span class="literal">NULL</span>, </span><br><span class="line"> <span class="keyword">CONSTRAINT</span> [PK_Employees] PRIMARY <span class="keyword">KEY</span> CLUSTERED ([<span class="keyword">Id</span>] <span class="keyword">ASC</span>) <span class="keyword">ON</span> [PRIMARY] </span><br><span class="line">) <span class="keyword">ON</span> [PRIMARY] </span><br><span class="line"><span class="keyword">GO</span> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> [HR].[Employees] <span class="keyword">ADD</span>  <span class="keyword">CONSTRAINT</span> [DF_Employees_ModifiedDate]  <span class="keyword">DEFAULT</span> (<span class="keyword">GETDATE</span>()) <span class="keyword">FOR</span> [ModifiedDate] </span><br><span class="line"><span class="keyword">GO</span></span><br></pre></td></tr></table></figure><h4 id="Networks"><a href="#Networks" class="headerlink" title="Networks"></a>Networks</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">networks:</span></span><br><span class="line"><span class="attr">  docker_ntierdemo-net:</span>       </span><br><span class="line"><span class="attr">    ipam:</span></span><br><span class="line"><span class="attr">      driver:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">      config:</span></span><br><span class="line"><span class="attr">        - subnet:</span> <span class="number">172.16</span><span class="number">.238</span><span class="number">.0</span><span class="string">/24</span></span><br></pre></td></tr></table></figure><p>In the networks configuration section, we can define any custom network properties that are needed. if we don’t define any networks configuration, docker will create a default network with bridge mode enabled. In the above example, i created custom network with default subnet range so that i can configure the custom ip address for my app and db server. This will be useful for scenarios like when you have some enterprise application with licensing tool installed based on certain device parameter such as mac address, ip address so that you will have the container instances created with same ip address, mac address every time it created with out installing the license for every instance.  </p><h3 id="App-Server-services"><a href="#App-Server-services" class="headerlink" title="App Server services"></a>App Server services</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">docker_ntierdemo_app:</span>    </span><br><span class="line"><span class="attr">    image:</span> <span class="string">jeevasubburaj/dockerntierdemo_app:v1</span></span><br><span class="line"><span class="attr">    build:</span></span><br><span class="line"><span class="attr">      context:</span> <span class="string">./NtierMvc/bin/Release/Publish</span>          </span><br><span class="line"><span class="attr">    depends_on:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">docker_ntierdemo_db</span></span><br><span class="line"><span class="attr">    hostname:</span> <span class="string">$&#123;APP_UUID&#125;</span></span><br><span class="line"><span class="attr">    container_name:</span> <span class="string">$&#123;APP_UUID&#125;</span></span><br><span class="line"><span class="attr">    networks:</span> </span><br><span class="line"><span class="attr">      docker_ntierdemo-net:</span>        </span><br><span class="line"><span class="attr">        ipv4_address:</span> <span class="number">172.16</span><span class="number">.238</span><span class="number">.20</span></span><br></pre></td></tr></table></figure><p>In the App Server Services Configuration, we define the name of the image and in the build context, configure the published folder output path. We will create a publish profile from visual studio to deploy the build output in the above mentioned folder along with the <strong>DockerFile</strong>. The DockerFile must be added in the project and set the <strong>build action as content</strong> so that it will also get deployed to publish folder.  </p><p><a href="https://3.bp.blogspot.com/-G-Wojx8H0pk/XAdLbI4Hj6I/AAAAAAAHA-Q/gnkaqSm7bAMuSTzUFmf6PaaRqNB_1rlOgCEwYBhgL/s1600/app_docker_file.png" target="_blank" rel="noopener"><img src="https://3.bp.blogspot.com/-G-Wojx8H0pk/XAdLbI4Hj6I/AAAAAAAHA-Q/gnkaqSm7bAMuSTzUFmf6PaaRqNB_1rlOgCEwYBhgL/s1600/app_docker_file.png" alt></a></p><h3 id="dockerfile"><a href="#dockerfile" class="headerlink" title="dockerfile"></a>dockerfile</h3><pre><code>FROM microsoft/aspnet:latestCOPY . /inetpub/wwwroot/</code></pre><p>In this dockerfile, we are taking the base image of microsoft aspnet docker image and copy the build output directly into wwwroot folder inside the container image. we can also put the build output into different folder and create IIS web site using powershell command.  </p><p><strong>depends_on</strong> configuration defines the dependency between services. In this example, app server is dependent on database server so when we run the service , docker will start the database service first and then it will start the app service based on the order we defined.  </p><h3 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h3><p>We are now done with the orchestration configuration of deploying our application into docker container using docker compose, we can now build the image and bring up the container instances to test it. Before we start, we must create the publish profile to deploy the build output into publish folder. Make sure dockerfile in the web project has build action as content.  </p><p><a href="https://4.bp.blogspot.com/-swgbIl8gJUY/XAdLh-1d3qI/AAAAAAAHA-g/dOLNc2_XOs42k6wwfxwzp_CQskJ81o7AACEwYBhgL/s1600/publish_to_folder.png" target="_blank" rel="noopener"><img src="https://4.bp.blogspot.com/-swgbIl8gJUY/XAdLh-1d3qI/AAAAAAAHA-g/dOLNc2_XOs42k6wwfxwzp_CQskJ81o7AACEwYBhgL/s640/publish_to_folder.png" alt></a></p><p>Also, change the database server name matching with db server name defined in env file in <strong>web.config</strong> file.  </p><p><a href="https://4.bp.blogspot.com/-ehAAVTExwRw/XAdLib3UdWI/AAAAAAAHA-k/WF0himVujUM1lSgfSeht5vatinECm5qNgCEwYBhgL/s1600/web.config_changes.png" target="_blank" rel="noopener"><img src="https://4.bp.blogspot.com/-ehAAVTExwRw/XAdLib3UdWI/AAAAAAAHA-k/WF0himVujUM1lSgfSeht5vatinECm5qNgCEwYBhgL/s1600/web.config_changes.png" alt></a></p><p>Launch the powershell window from the root folder and run the <strong>docker images</strong> command to show the list of images. I have already downloaded aspnet and sql server images from docker hub.  </p><p><a href="https://4.bp.blogspot.com/-3opv5bbwsoQ/XAdLf6x7XQI/AAAAAAAHA-k/Pj_gVF8xVwIoLaDPssDrTflYJ8HRYQrjgCEwYBhgL/s1600/docker_images.png" target="_blank" rel="noopener"><img src="https://4.bp.blogspot.com/-3opv5bbwsoQ/XAdLf6x7XQI/AAAAAAAHA-k/Pj_gVF8xVwIoLaDPssDrTflYJ8HRYQrjgCEwYBhgL/s1600/docker_images.png" alt></a></p><p>Lets build the docker image using <strong>docker-compose build</strong> command. This will first create the database image using base sql server developer edison and create the database and tables based on the SQL we provided and then it will create app server based on aspnet framework docker image and copy the build output from publish folder and put it into wwwroot folder inside the container image.  </p><p><a href="https://1.bp.blogspot.com/-kBeQzlgaZ0U/XAdLdzAjy4I/AAAAAAAHA-Y/Vk3QV_A-aqgDCN3oosC5CHNQgscjVmRPwCEwYBhgL/s1600/docker_compose_build.png" target="_blank" rel="noopener"><img src="https://1.bp.blogspot.com/-kBeQzlgaZ0U/XAdLdzAjy4I/AAAAAAAHA-Y/Vk3QV_A-aqgDCN3oosC5CHNQgscjVmRPwCEwYBhgL/s1600/docker_compose_build.png" alt></a></p><p>Now, that we have successfully created the docker images, we can verify that by running <strong>docker images</strong> command.  </p><p><a href="https://4.bp.blogspot.com/-NAQ6Y28croI/XAdLghA9mBI/AAAAAAAHA-k/YveUjZdpY1wRUEJwIIXANk1lnw3XtzM0gCEwYBhgL/s1600/docker_images_v2.png" target="_blank" rel="noopener"><img src="https://4.bp.blogspot.com/-NAQ6Y28croI/XAdLghA9mBI/AAAAAAAHA-k/YveUjZdpY1wRUEJwIIXANk1lnw3XtzM0gCEwYBhgL/s1600/docker_images_v2.png" alt></a></p><p>Let us now bring up new container instance from our image using <strong>docker-compose up</strong> command. This command will create a database container instance first and then app server instance and attach it with the database server. Once the container instances are we can verify the instance by testing our application from the browser.  </p><p><a href="https://1.bp.blogspot.com/-9bunjA-Q8u0/XAdLe6yPcNI/AAAAAAAHA-U/CcWZL1zzwsIYem153iltuiUrfKH5g75TQCEwYBhgL/s1600/docker_compose_up.png" target="_blank" rel="noopener"><img src="https://1.bp.blogspot.com/-9bunjA-Q8u0/XAdLe6yPcNI/AAAAAAAHA-U/CcWZL1zzwsIYem153iltuiUrfKH5g75TQCEwYBhgL/s1600/docker_compose_up.png" alt></a></p><p>Verify the application by launching the browser and put the <strong>ip address of app server</strong> container instance.  </p><p><a href="https://3.bp.blogspot.com/-UbA0BQH9wHg/XAdLc8jdFyI/AAAAAAAHA-k/NsOre6wIqNsVMkMhlspzXzSXLpkf02mSwCEwYBhgL/s1600/demo_home_page.png" target="_blank" rel="noopener"><img src="https://3.bp.blogspot.com/-UbA0BQH9wHg/XAdLc8jdFyI/AAAAAAAHA-k/NsOre6wIqNsVMkMhlspzXzSXLpkf02mSwCEwYBhgL/s1600/demo_home_page.png" alt></a></p><p>Now, home page is up and running, let try adding new employee into our table.  </p><p><a href="https://4.bp.blogspot.com/-DNoyeDy3060/XAdLbl4IhbI/AAAAAAAHA-k/RfJ3vhtej3Q-zHiHtTKZsgcvLJO10ghowCEwYBhgL/s1600/create_employee_1.png" target="_blank" rel="noopener"><img src="https://4.bp.blogspot.com/-DNoyeDy3060/XAdLbl4IhbI/AAAAAAAHA-k/RfJ3vhtej3Q-zHiHtTKZsgcvLJO10ghowCEwYBhgL/s1600/create_employee_1.png" alt></a></p><p><a href="https://3.bp.blogspot.com/-qkBfNLC4bGA/XAdLhBvyPII/AAAAAAAHA-Y/e_-oNXwOrdgXsIqkKWsUo_hk_wLEqmNuwCEwYBhgL/s1600/employee_list.png" target="_blank" rel="noopener"><img src="https://3.bp.blogspot.com/-qkBfNLC4bGA/XAdLhBvyPII/AAAAAAAHA-Y/e_-oNXwOrdgXsIqkKWsUo_hk_wLEqmNuwCEwYBhgL/s1600/employee_list.png" alt></a></p><p>Lets also verify the data in sql server by connecting with <strong>localhost:14333</strong> port from host.  </p><p><a href="https://3.bp.blogspot.com/-iCFpVVlhUrg/XAdLb3dfRLI/AAAAAAAHA-Q/mW5gjMp6HE4ErlrYn7rcqzwJMn5zNNWbACEwYBhgL/s1600/db_login.png" target="_blank" rel="noopener"><img src="https://3.bp.blogspot.com/-iCFpVVlhUrg/XAdLb3dfRLI/AAAAAAAHA-Q/mW5gjMp6HE4ErlrYn7rcqzwJMn5zNNWbACEwYBhgL/s1600/db_login.png" alt></a></p><p><a href="https://2.bp.blogspot.com/-NyqKj_2UCK8/XAdLcuVgy1I/AAAAAAAHA-k/nUcLIBrjODEJRWliQpf0tIDkMOlmRJquQCEwYBhgL/s1600/db_result.png" target="_blank" rel="noopener"><img src="https://2.bp.blogspot.com/-NyqKj_2UCK8/XAdLcuVgy1I/AAAAAAAHA-k/nUcLIBrjODEJRWliQpf0tIDkMOlmRJquQCEwYBhgL/s1600/db_result.png" alt></a></p><p>Great. If we stop the container now, all the data that we created will be gone and it will start from clean slate for next instance. Let us test that by running <strong>docker-compose down</strong> command. you can also verify if all the running instances are down by running <strong>docker ps</strong> command.  </p><p><a href="https://4.bp.blogspot.com/-Ron6heO0tHQ/XAdLeaBkIqI/AAAAAAAHA-g/0VPXXbbSPYkAVDeso1AezkdL-4-ChIEhQCEwYBhgL/s1600/docker_compose_down.png" target="_blank" rel="noopener"><img src="https://4.bp.blogspot.com/-Ron6heO0tHQ/XAdLeaBkIqI/AAAAAAAHA-g/0VPXXbbSPYkAVDeso1AezkdL-4-ChIEhQCEwYBhgL/s1600/docker_compose_down.png" alt></a></p><p>If we create a new instance now, it will start from clean slate and the employee record that we created should not be exists.<br>Let us run d<strong>ocker-compose up</strong> command to bring up the new instance.  </p><p><a href="https://4.bp.blogspot.com/-YAyX0oi0ggI/XAdLfQQ-9iI/AAAAAAAHA-U/kzv35O8uFMsqKddjJwsTR9upbpDpYhQegCEwYBhgL/s1600/docker_compose_up_2.png" target="_blank" rel="noopener"><img src="https://4.bp.blogspot.com/-YAyX0oi0ggI/XAdLfQQ-9iI/AAAAAAAHA-U/kzv35O8uFMsqKddjJwsTR9upbpDpYhQegCEwYBhgL/s1600/docker_compose_up_2.png" alt></a></p><p><a href="https://1.bp.blogspot.com/-JqDpToikUj4/XAdLhZXDBsI/AAAAAAAHA-c/CAwSeultlTIo_x8R-rBSC_zt_YDin6ngQCEwYBhgL/s1600/employee_list_no_result.png" target="_blank" rel="noopener"><img src="https://1.bp.blogspot.com/-JqDpToikUj4/XAdLhZXDBsI/AAAAAAAHA-c/CAwSeultlTIo_x8R-rBSC_zt_YDin6ngQCEwYBhgL/s1600/employee_list_no_result.png" alt></a></p><p>We have successfully deployed the complete .N-Tier CRUD MVC application into docker container. As i mentioned earlier, we can use the containerization for automated end to end or security testing for monolithic application. We can also integrate with CI / CD pipeline to run all the test scenarios before merging the pull request from the feature branch.  </p><h3 id="Additional-Notes"><a href="#Additional-Notes" class="headerlink" title="Additional Notes"></a>Additional Notes</h3><p>In the above example, we did not store the state changes as part of the container instances. All the changes are gone when the container instance is stopped. However, if we want to store the state of the application and database changes, docker provides the functionality of creating volumes which will mount the folder from host to docker container so that all the state changes will be persisted. This will be useful in the scenario like automated testing to store the results.  </p><p>In order to create volume in docker, we should use volumes configuration section in docker-compose file. In the example below, i created the directory called DB on my host server and put the MDF and LDF database file inside the folder and then mount that folder to container.</p><pre><code>volumes:     - ./DB/:c:\db</code></pre><p>Next step is to attach the database instead of creating database by adding <strong>attach_dbs</strong> command in env file. This will create a database called NtierMvcDB and attach the existing MDF and LDF file into that every time when the container instance is created. Also, this will store all the DB state changes even after the container is stopped. When we initiate the new container instance, it will show the data from the previous instance as well.</p><pre><code>SA_PASSWORD=P@ssw0rdACCEPT_EULA=Yattach_dbs=[{&apos;dbName&apos;:&apos;NtierMvcDB&apos;,&apos;dbFiles&apos;:[&apos;C:\\\\DB\\\\NtierMvcDB.mdf&apos;,&apos;C:\\\\DB\\\\NtierMvcDB.ldf&apos;]}]</code></pre><p>Some of monolithic core application engine may run on windows service. The good thing with docker on windows, it supports windows service since there is no GUI involved. If you want to install your application engine windows service as part of docker image build and run the windows service, use the below powershell commands in DockerFile.</p><pre><code>RUN powershell new-service -Name &quot;AppEngineService&quot; -StartupType Automatic -BinaryPathName &quot;C:\app\bin\AppEngineService.exe&quot;RUN powershell start-service -Name &quot;AppEngineService&quot;</code></pre><h3 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h3><p>I hope this article helps you understand how to containerize .net framework monolithic application. Docker containerization is not just only for breaking monolithic application into micro service architecture. It can also be considered to modernize monolithic application packaging into docker image and ship it very frequently for various scenarios like automated end to end testing, security testing.  </p><p>I have uploaded the entire source code in my  <a href="https://github.com/vavjeeva/DockerNTierMVCAppDemo" target="_blank" rel="noopener">github</a> repository.  </p><p>Happy Coding!!</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://4.bp.blogspot.com/-ZUK-MZx0Kes/XAf7Cs4YGZI/AAAAAAAHA-s/O_Tr_UuqCwcuO_apmJX6af08u6qrqaaKgCLcBGAs/s640/title_image.png&quot; alt&gt;&lt;br&gt;Microservice Architecture and Containerization using docker are the latest buzzword in the software industry. But, Many people including me in the software industry developing big monolithic enterprise applications using .Net Framework for many years have very limited scope of applying these concepts into existing applications. Because, its not easy to break enterprise monolithic application into micro service architecture without redesigning the application. Also, .Net Core framework would be the de facto choice for micro service architecture because it supports cross platform so it can be hosted in linux container or windows container. As of today, Windows Docker container do not support GUI application such as winforms, wpf etc.. However, we can still consider modernizing .Net Framework monolithic application by packaging into docker image for automated end to end testing or security testing.  &lt;/p&gt;
    
    </summary>
    
    
      <category term=".Net" scheme="https://jeevasubburaj.com/tags/Net/"/>
    
      <category term="Docker" scheme="https://jeevasubburaj.com/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Real Time Cricket Score Chrome Extension using Azure Functions and SignalR</title>
    <link href="https://jeevasubburaj.com/2018/09/12/real-time-cricket-score-chrome/"/>
    <id>https://jeevasubburaj.com/2018/09/12/real-time-cricket-score-chrome/</id>
    <published>2018-09-12T17:05:00.000Z</published>
    <updated>2019-03-15T17:33:19.282Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://3.bp.blogspot.com/-NC2Tx0NGF2U/W5k88g2Tz0I/AAAAAAAG3hA/Azqp8bW2FOAVqINAas-1lhvpA3tagYC2QCLcBGAs/s640/title_image.png" alt></p><p>In this article, I will discuss about how to show real time cricket score notification from chrome extension using serverless Azure Functions and Azure SignalR. I have used cricapi.com free API service to get the live cricket score updates. The purpose of this article is to show the power of serverless architecture using azure functions and broadcasting to connected clients in realtime using Azure SignalR. The demo source code I attached with this article is for personal educational purpose only and not production use.  </p><a id="more"></a>  <h3 id="Steps"><a href="#Steps" class="headerlink" title="Steps"></a>Steps</h3><h4 id="Register-Cricket-Services-API"><a href="#Register-Cricket-Services-API" class="headerlink" title="Register Cricket Services API"></a>Register Cricket Services API</h4><p>As a first step, to consume the API Service from <a href="http://cricapi.com/" target="_blank" rel="noopener">cricapi.com</a>, register the account with the details to get the API Key. They allow 100 free hits per day for testing purpose.  </p><p><a href="https://2.bp.blogspot.com/-wNdjH52kZ-Y/W5ki7YUIDKI/AAAAAAAG3eY/Tk7ep60K9dcW-2BNF6c1PHGjYK4ISu4MQCLcBGAs/s1600/cricapi_dashboard.png" target="_blank" rel="noopener"><img src="https://2.bp.blogspot.com/-wNdjH52kZ-Y/W5ki7YUIDKI/AAAAAAAG3eY/Tk7ep60K9dcW-2BNF6c1PHGjYK4ISu4MQCLcBGAs/s640/cricapi_dashboard.png" alt></a></p><h4 id="Creating-Azure-SignalR-Service"><a href="#Creating-Azure-SignalR-Service" class="headerlink" title="Creating Azure SignalR Service"></a>Creating Azure SignalR Service</h4><p>Log into your Azure Portal (<a href="https://portal.azure.com/" target="_blank" rel="noopener">https://portal.azure.com/</a>) and create a new resource of type SignalR Service. After the service is created, copy the connection string from the Keys section.  </p><p><a href="https://4.bp.blogspot.com/-aRWg-Ssz3so/W3MHFLL8FqI/AAAAAAAGyb0/TggoxXn2WgUN7sNATzV_XLQmhbHM3trXgCPcBGAYYCw/s1600/SignalR%2BService%2B-%2BEnd%2BPoint.png" target="_blank" rel="noopener"><img src="https://4.bp.blogspot.com/-aRWg-Ssz3so/W3MHFLL8FqI/AAAAAAAGyb0/TggoxXn2WgUN7sNATzV_XLQmhbHM3trXgCPcBGAYYCw/s640/SignalR%2BService%2B-%2BEnd%2BPoint.png" alt></a></p><h4 id="Creating-Azure-Function-App"><a href="#Creating-Azure-Function-App" class="headerlink" title="Creating Azure Function App"></a>Creating Azure Function App</h4><p><strong>Prerequisites</strong></p><ul><li>Visual Studio 2017 Latest Version</li><li>Azure Portal Account</li></ul><p>Launch the Visual Studio and Create a New Azure Function Project</p><p><a href="https://1.bp.blogspot.com/-wXp-MIi2LYM/W5kkDUY7Z5I/AAAAAAAG3ek/tk7GaVJdFLc9Ghq4G20USvToiBtVj-wAQCLcBGAs/s1600/2.%2BNew%2BProject.png" target="_blank" rel="noopener"><img src="https://1.bp.blogspot.com/-wXp-MIi2LYM/W5kkDUY7Z5I/AAAAAAAG3ek/tk7GaVJdFLc9Ghq4G20USvToiBtVj-wAQCLcBGAs/s640/2.%2BNew%2BProject.png" alt></a></p><p>Select the Azure Function v2 Preview and the Http trigger template.  </p><p><a href="https://2.bp.blogspot.com/-ms769xdyFFw/W5kkWyPGcfI/AAAAAAAG3e4/_0xFbb3dU0kTvQ9RItRx0QMft5nNPEQ2wCLcBGAs/s1600/1.%2BHttpTrigger.png" target="_blank" rel="noopener"><img src="https://2.bp.blogspot.com/-ms769xdyFFw/W5kkWyPGcfI/AAAAAAAG3e4/_0xFbb3dU0kTvQ9RItRx0QMft5nNPEQ2wCLcBGAs/s640/1.%2BHttpTrigger.png" alt></a></p><p>For this demo, we will be creating two azure functions.</p><ul><li><p>NegotiateFunction (HttpTrigger)</p></li><li><p>This function will get the JWT token for the client so that SignalR client can connect to Azure Signalr Service Hub.</p></li><li><p>BroadcastFunction (TimerTrigger)</p></li><li><p>This function runs every 1 min (configurable) and call the CricAPI Service to get the latest score for defined match id and broadcast it to all connected clients.</p></li></ul><p>In order to use Azure SignalR Service in Azure Functions, I have used  <a href="https://twitter.com/nthonyChu" target="_blank" rel="noopener">Anthony Chu</a>“AzureAdvocates.WebJobs.Extensions.SignalRService” library.</p><p><a href="https://1.bp.blogspot.com/-C5_zDhaayFs/W5kmmobMzzI/AAAAAAAG3fM/HKs5jTOGY-U8gcEBx7-VNlawqeRAX01cQCEwYBhgL/s1600/5%2BNuget%2BPackages.png" target="_blank" rel="noopener"><img src="https://1.bp.blogspot.com/-C5_zDhaayFs/W5kmmobMzzI/AAAAAAAG3fM/HKs5jTOGY-U8gcEBx7-VNlawqeRAX01cQCEwYBhgL/s640/5%2BNuget%2BPackages.png" alt></a></p><h4 id="NegotiateFuntion-cs"><a href="#NegotiateFuntion-cs" class="headerlink" title="NegotiateFuntion.cs"></a>NegotiateFuntion.cs</h4><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">NegotiateFunction</span></span><br><span class="line">    &#123;</span><br><span class="line">        [<span class="meta">FunctionName(<span class="meta-string">"negotiate"</span>)</span>]</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IActionResult <span class="title">Run</span>(<span class="params">[HttpTrigger(AuthorizationLevel.Anonymous, <span class="string">"get"</span>, <span class="string">"post"</span>, Route = <span class="literal">null</span></span>)]HttpRequest req,</span></span><br><span class="line"><span class="function">            [<span class="title">SignalRConnectionInfo</span>(<span class="params">HubName = <span class="string">"broadcasthub"</span></span>)]SignalRConnectionInfo info, ILogger log)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">return</span> info != <span class="literal">null</span></span><br><span class="line">                ? (ActionResult)<span class="keyword">new</span> OkObjectResult(info)</span><br><span class="line">                : <span class="keyword">new</span> NotFoundObjectResult(<span class="string">"Failed to load SignalR Info."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="BroadCastFunction-cs"><a href="#BroadCastFunction-cs" class="headerlink" title="BroadCastFunction.cs"></a>BroadCastFunction.cs</h4><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">BroadcastFunction</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> HttpClient httpClient = <span class="keyword">new</span> HttpClient();</span><br><span class="line"> </span><br><span class="line">        [<span class="meta">FunctionName(<span class="meta-string">"broadcast"</span>)</span>]</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">async</span> <span class="keyword">void</span> <span class="title">Run</span>(<span class="params">[TimerTrigger(<span class="string">"0 */1 * * * *"</span></span>)]TimerInfo myTimer,</span></span><br><span class="line"><span class="function">            [<span class="title">SignalR</span>(<span class="params">HubName = <span class="string">"broadcasthub"</span></span>)]IAsyncCollector&lt;signalrmessage&gt; signalRMessages, ILogger log)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            httpClient.DefaultRequestHeaders.Accept.Clear();</span><br><span class="line">            httpClient.DefaultRequestHeaders.Accept.Add(<span class="keyword">new</span> MediaTypeWithQualityHeaderValue(<span class="string">"application/json"</span>));</span><br><span class="line"> </span><br><span class="line">            <span class="comment">//<span class="doctag">TODO:</span> API key should be stored in Azure Key Vault .</span></span><br><span class="line">            <span class="comment">//For Demo purpose, i hard coded the value here.</span></span><br><span class="line">            <span class="keyword">var</span> values = <span class="keyword">new</span> Dictionary&lt;<span class="keyword">string</span> <span class="keyword">string</span>=<span class="string">""</span>&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//Hard coded Cricket Match Unique ID. You can change the Match id based on ongoing matchers</span></span><br><span class="line">              &#123;<span class="string">"apikey"</span>, <span class="string">"_API_KEY_HERE"</span>&#125;,&#123;<span class="string">"unique_id"</span>, <span class="string">"1119553"</span>&#125;</span><br><span class="line">            &#125;;</span><br><span class="line"> </span><br><span class="line">            <span class="keyword">using</span> (<span class="keyword">var</span> response = httpClient.PostAsJsonAsync(<span class="keyword">new</span> Uri(<span class="string">"http://cricapi.com/api/cricketScore/"</span>), values).Result)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">var</span> resultObj = response.Content.ReadAsStringAsync().Result;</span><br><span class="line">                <span class="keyword">dynamic</span> result = JsonConvert.DeserializeObject(resultObj);</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">                <span class="keyword">await</span> signalRMessages.AddAsync(<span class="keyword">new</span> SignalRMessage()</span><br><span class="line">                &#123;</span><br><span class="line">                    Target = <span class="string">"broadcastData"</span>,</span><br><span class="line">                    Arguments = <span class="keyword">new</span> <span class="keyword">object</span>[] &#123; result.score &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>We have to create Appsettings Key called  <strong>AzureSignalRConnectionString</strong> in order to connect to Azure SignalR Service from our Azure Functions. We will have to add the settings in local.settings.json for local testing and add it into Application Settings in Azure after we deploy it.</p><h4 id="local-settings-json"><a href="#local-settings-json" class="headerlink" title="local.settings.json"></a>local.settings.json</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"IsEncrypted"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">"Values"</span>: &#123;</span><br><span class="line">    <span class="attr">"AzureWebJobsStorage"</span>: <span class="string">"UseDevelopmentStorage=true"</span>,</span><br><span class="line">    <span class="attr">"AzureWebJobsDashboard"</span>: <span class="string">"UseDevelopmentStorage=true"</span>,</span><br><span class="line">    <span class="attr">"FUNCTIONS_WORKER_RUNTIME"</span>: <span class="string">"dotnet"</span>,</span><br><span class="line">    <span class="attr">"AzureSignalRConnectionString"</span>: <span class="string">"Endpoint=https://magicpaste.service.signalr.net;AccessKey="</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"Host"</span>: &#123;</span><br><span class="line">    <span class="attr">"LocalHttpPort"</span>: <span class="number">7071</span>,</span><br><span class="line">    <span class="attr">"CORS"</span>: <span class="string">"*"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We are now done with the coding for the Azure functions, we can start testing it locally first before deploy into Azure Portal. In the local.settings.json, we have defined the localhttpport 7071 and allowed cross domains request by putting CORS : *  </p><p>Run the Application by pressing F5 which will create the host and deploy the functions in localhost.</p><p><a href="https://1.bp.blogspot.com/-ycJMuTrnODg/W5kpGeAb7nI/AAAAAAAG3fg/OadgFvQQULc0qTOUjNMrj965HJGwREp8ACEwYBhgL/s1600/AzureFunctions_Local_Run.png" target="_blank" rel="noopener"><img src="https://1.bp.blogspot.com/-ycJMuTrnODg/W5kpGeAb7nI/AAAAAAAG3fg/OadgFvQQULc0qTOUjNMrj965HJGwREp8ACEwYBhgL/s640/AzureFunctions_Local_Run.png" alt></a></p><p>As you see above, Azure Functions are now hosted in local, we can run the negotiate function using the following URL which will return the JWT Token to connect to SignalR Service.</p><p><a href="https://4.bp.blogspot.com/-dgAl9J1-chA/W5kpGTSFx1I/AAAAAAAG3fk/hHqiIGADsb0e8XJYVLDLOC2urln1g4GzQCEwYBhgL/s1600/AzureFunctions_Local_Negotiate_Functions.png" target="_blank" rel="noopener"><img src="https://4.bp.blogspot.com/-dgAl9J1-chA/W5kpGTSFx1I/AAAAAAAG3fk/hHqiIGADsb0e8XJYVLDLOC2urln1g4GzQCEwYBhgL/s640/AzureFunctions_Local_Negotiate_Functions.png" alt></a></p><p>Now that it worked in localhost, we can deploy the Azure Functions into Azure Portal.</p><h4 id="Publishing-Azure-Function-App"><a href="#Publishing-Azure-Function-App" class="headerlink" title="Publishing Azure Function App"></a>Publishing Azure Function App</h4><p>In Visual Studio, Right click on the solution and Select the Publish option from the Menu.</p><p><a href="https://3.bp.blogspot.com/-RxHoUUPFams/W5kw15ZUK9I/AAAAAAAG3f0/TA17sVsxz2MxjcQowP0ZwACP9NEJl8-PQCLcBGAs/s1600/publish_wizard_1.png" target="_blank" rel="noopener"><img src="https://3.bp.blogspot.com/-RxHoUUPFams/W5kw15ZUK9I/AAAAAAAG3f0/TA17sVsxz2MxjcQowP0ZwACP9NEJl8-PQCLcBGAs/s640/publish_wizard_1.png" alt></a></p><p>Check the Run from ZIP checkbox and click the Publish button.</p><p><a href="https://4.bp.blogspot.com/-C6n3_-eHFtU/W5kxG5LP7II/AAAAAAAG3f8/lww0J4iqKocoXYY7IdLvOgk0WAyHakWKQCLcBGAs/s1600/publish_wizard_2.png" target="_blank" rel="noopener"><img src="https://4.bp.blogspot.com/-C6n3_-eHFtU/W5kxG5LP7II/AAAAAAAG3f8/lww0J4iqKocoXYY7IdLvOgk0WAyHakWKQCLcBGAs/s1600/publish_wizard_2.png" alt></a></p><p>Click on the Create button to create azure hosting plan, storage account under your azure subscription. After the account is created, by clicking the publish button any time will ship the files into portal and deploy the Azure Functions.</p><p><a href="https://2.bp.blogspot.com/-D7yLYskUnbw/W5kxmERG8FI/AAAAAAAG3gE/doWzl9wr_l0yStJAdzMcvDN3fqZutiNYQCLcBGAs/s1600/publish_wizard_3.png" target="_blank" rel="noopener"><img src="https://2.bp.blogspot.com/-D7yLYskUnbw/W5kxmERG8FI/AAAAAAAG3gE/doWzl9wr_l0yStJAdzMcvDN3fqZutiNYQCLcBGAs/s640/publish_wizard_3.png" alt></a></p><p>You can login to Azure Portal to check the deployed Azure Functions.</p><p><a href="https://4.bp.blogspot.com/-8ZAB3BHWFUE/W5kx8ml-pcI/AAAAAAAG3gM/FnHXUkui5Hom4BGrjcrRDiNKyrBxwIpbQCLcBGAs/s1600/portal_azure_functions.png" target="_blank" rel="noopener"><img src="https://4.bp.blogspot.com/-8ZAB3BHWFUE/W5kx8ml-pcI/AAAAAAAG3gM/FnHXUkui5Hom4BGrjcrRDiNKyrBxwIpbQCLcBGAs/s640/portal_azure_functions.png" alt></a></p><p>We also need to add the AzureSignalRConnectionString key in Application Settings.</p><p><a href="https://1.bp.blogspot.com/-JJS7KHt7sug/W5kyHJ_OlUI/AAAAAAAG3gQ/xl3eCxyakaok0WHg7U20WsMR1yLj0KLegCLcBGAs/s1600/portal_azure_functions_app_settings.png" target="_blank" rel="noopener"><img src="https://1.bp.blogspot.com/-JJS7KHt7sug/W5kyHJ_OlUI/AAAAAAAG3gQ/xl3eCxyakaok0WHg7U20WsMR1yLj0KLegCLcBGAs/s640/portal_azure_functions_app_settings.png" alt></a></p><p>We have completed publishing Azure Functions in the Portal. Let us now create a chrome extension signalr client to receive the cricket score in real time. The timer trigger broadcast function will run every minute and push the cricket score to all connected clients.</p><h4 id="Creating-Chrome-Extension"><a href="#Creating-Chrome-Extension" class="headerlink" title="Creating Chrome Extension"></a>Creating Chrome Extension</h4><p><strong>SignalRClient.js</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> apiBaseUrl = <span class="string">'https://azurefunctionscricketscore20180911095957.azurewebsites.net'</span>;</span><br><span class="line"><span class="keyword">const</span> hubName = <span class="string">'broadcasthub'</span>;</span><br><span class="line"> </span><br><span class="line">getConnectionInfo().then(<span class="function"><span class="params">info</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> options = &#123;</span><br><span class="line">    accessTokenFactory: <span class="function"><span class="params">()</span> =&gt;</span> info.accessKey</span><br><span class="line">    &#125;;</span><br><span class="line">   </span><br><span class="line">  <span class="keyword">const</span> connection = <span class="keyword">new</span> signalR.HubConnectionBuilder()</span><br><span class="line">    .withUrl(info.endpoint, options)</span><br><span class="line">    .configureLogging(signalR.LogLevel.Information)</span><br><span class="line">    .build();</span><br><span class="line"> </span><br><span class="line">    connection.on(<span class="string">'broadcastData'</span>, (message) =&gt; &#123;</span><br><span class="line">        <span class="keyword">new</span> Notification(message, &#123;</span><br><span class="line">            icon: <span class="string">'48.png'</span>,</span><br><span class="line">            body: message</span><br><span class="line">          &#125;);   </span><br><span class="line">  &#125;);</span><br><span class="line">  connection.onclose(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'disconnected'</span>));</span><br><span class="line"> </span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'connecting...'</span>);</span><br><span class="line">  connection.start()</span><br><span class="line">    .then(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'connected!'</span>))</span><br><span class="line">    .catch(<span class="built_in">console</span>.error);</span><br><span class="line">&#125;).catch(alert);</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getConnectionInfo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> axios.post(<span class="string">`<span class="subst">$&#123;apiBaseUrl&#125;</span>/api/negotiate`</span>)</span><br><span class="line">    .then(<span class="function"><span class="params">resp</span> =&gt;</span> resp.data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>Manifest.json</strong>  </p><p>In the manifest.json, we defined the list of scripts to load (axios, signalr and signalrclient).<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"Real Time Cricket Score Demo"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"1.0"</span>,</span><br><span class="line">  <span class="attr">"description"</span>:</span><br><span class="line">    <span class="string">"Real time Cricket Score Update from Serverless Azure Functions pop up on the desktop."</span>,</span><br><span class="line">  <span class="attr">"icons"</span>: &#123;<span class="attr">"16"</span>: <span class="string">"16.png"</span>, <span class="attr">"48"</span>: <span class="string">"48.png"</span>, <span class="attr">"128"</span>: <span class="string">"128.png"</span>&#125;,</span><br><span class="line">  <span class="attr">"permissions"</span>: [</span><br><span class="line">    <span class="string">"background"</span>,</span><br><span class="line">   <span class="string">"tabs"</span>,</span><br><span class="line">    <span class="string">"notifications"</span>,</span><br><span class="line">    <span class="string">"http://*/*"</span>,</span><br><span class="line">    <span class="string">"https://*/*"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"background"</span>: &#123; </span><br><span class="line">    <span class="attr">"persistent"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"scripts"</span>: [<span class="string">"axios.min.js"</span>,<span class="string">"signalr.js"</span>,<span class="string">"signalrclient.js"</span>] &#125;,</span><br><span class="line">  <span class="attr">"manifest_version"</span>: <span class="number">2</span>,</span><br><span class="line"> </span><br><span class="line">  <span class="attr">"web_accessible_resources"</span>: [</span><br><span class="line">    <span class="string">"48.png"</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>To install the chrome extension in your local machine, launch chrome and open the extensions from the menu. Click the load unpacked extension and select the folder that chrome extension is placed.</p><p><a href="https://3.bp.blogspot.com/-zNkxA9RSi0E/W5k0c04YBEI/AAAAAAAG3gc/Xsb2NcP3ZZ8J4MZkKRp7hA-LoErMC0Z_gCLcBGAs/s1600/chrome%2Bextension%2Bclient.png" target="_blank" rel="noopener"><img src="https://3.bp.blogspot.com/-zNkxA9RSi0E/W5k0c04YBEI/AAAAAAAG3gc/Xsb2NcP3ZZ8J4MZkKRp7hA-LoErMC0Z_gCLcBGAs/s640/chrome%2Bextension%2Bclient.png" alt></a></p><p>After the extension is installed, broadcast azure function will execute based on the schedule and broadcast the latest score to the new connected client as below.</p><p><a href="https://4.bp.blogspot.com/-LF-Yac3Z7iQ/W5k4kR9pUhI/AAAAAAAG3gs/HRQHyXzAi60QiqZvf32Hwillmb8eSnEcQCLcBGAs/s1600/chrome%2Bextension%2Bresult.png" target="_blank" rel="noopener"><img src="https://4.bp.blogspot.com/-LF-Yac3Z7iQ/W5k4kR9pUhI/AAAAAAAG3gs/HRQHyXzAi60QiqZvf32Hwillmb8eSnEcQCLcBGAs/s640/chrome%2Bextension%2Bresult.png" alt></a></p><h3 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h3><p>With the few lines of code, we have created the serverless azure functions, which will fetch the data from API endpoint and broadcast the messages to all connected clients in real time using Azure SignalR. In this article, I have hard coded the API key in the program but ideally, it should be stored in Azure Key Vault and read it from there. I hope this article helps you get started with Azure Functions. I have uploaded the entire source code in my <a href="https://github.com/vavjeeva/AzureFunctions-RealTimeCricketScore" target="_blank" rel="noopener">github</a> repository.  </p><p>Happy Coding!</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://3.bp.blogspot.com/-NC2Tx0NGF2U/W5k88g2Tz0I/AAAAAAAG3hA/Azqp8bW2FOAVqINAas-1lhvpA3tagYC2QCLcBGAs/s640/title_image.png&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;In this article, I will discuss about how to show real time cricket score notification from chrome extension using serverless Azure Functions and Azure SignalR. I have used cricapi.com free API service to get the live cricket score updates. The purpose of this article is to show the power of serverless architecture using azure functions and broadcasting to connected clients in realtime using Azure SignalR. The demo source code I attached with this article is for personal educational purpose only and not production use.  &lt;/p&gt;
    
    </summary>
    
    
      <category term="C#" scheme="https://jeevasubburaj.com/tags/C/"/>
    
      <category term="Asp.Net Core" scheme="https://jeevasubburaj.com/tags/Asp-Net-Core/"/>
    
      <category term=".Net Core" scheme="https://jeevasubburaj.com/tags/Net-Core/"/>
    
      <category term="Azure" scheme="https://jeevasubburaj.com/tags/Azure/"/>
    
      <category term="AzureFunctions" scheme="https://jeevasubburaj.com/tags/AzureFunctions/"/>
    
      <category term="SignalR" scheme="https://jeevasubburaj.com/tags/SignalR/"/>
    
  </entry>
  
  <entry>
    <title>Azure SignalR Messaging with .Net Core Console App Server and Client</title>
    <link href="https://jeevasubburaj.com/2018/08/14/azure-signalr-messaging-with-net-core/"/>
    <id>https://jeevasubburaj.com/2018/08/14/azure-signalr-messaging-with-net-core/</id>
    <published>2018-08-14T18:17:00.000Z</published>
    <updated>2019-03-15T17:32:19.747Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://2.bp.blogspot.com/-CkqyHBfVka0/W3MecQh3mTI/AAAAAAAGycw/VksPWJI4r8sNNnyDGit-3hvIgGWjPFwyACLcBGAs/s640/Article%2BTitle.png" alt></p><p>Real-time technologies are now part of every modern applications and SignalR is the most popular .net library to create real time scenarios. Recently Microsoft announced the <a href="https://azure.microsoft.com/en-us/blog/azure-signalr-service-a-fully-managed-service-to-add-real-time-functionality/" target="_blank" rel="noopener">public preview of Azure SignalR</a>, a cloud based fully managed service to build real time application without worrying about capacity provisioning, scaling, or persistent connections. In this article, we are going to discuss about how to create .Net Core SignalR server console app to broadcast the messages to all the connected clients in real-time without using Asp.net Core SignalR Web App.  </p><a id="more"></a>  <h3 id="Deeper-dive-Azure-SignalR-Service"><a href="#Deeper-dive-Azure-SignalR-Service" class="headerlink" title="Deeper dive Azure SignalR Service"></a>Deeper dive Azure SignalR Service</h3><p>In the enterprise world, SignalR applications often comes with high volume data flows and large number of concurrent connections between app and client. To handle that scenario, we have to setup the web farms with sticky sessions and a backplane like Redis to make sure messages are distributed to the right client. If we use Azure SignalR service, it will handle all those issues and we can focus only on business logic.  </p><p>In addition to that, Azure SignalR Service works well with existing Asp.net Core SignalR Hub with very less changes. We have to add reference to Azure SignalR SDK and configure the Azure connection string in the application and then adding few lines of code  <strong><em>services.AddSignalR().AddAzureSignalR()</em></strong>  and  <em><strong>app.UseAzureSignalR</strong></em>  in  <strong>Startup.cs</strong>.  </p><p>Existing Asp.net Core SignalR client app works with Azure SignalR Service without any modification in the code. You can refer my early article about “<a href="http://www.jeevasubburaj.com/2018/07/magic-paste-universal-paste-data-to-web.html" target="_blank" rel="noopener">How to build real time communication with cross platform devices using Azure SignalR Service</a>” for more details.  </p><p>As of today, if you want to implement duplex communication between SignalR client and server using Azure SignalR Service, you must need ASP.net Core SignalR Server Hub(Web App). However, If you just want to push the messages from server to clients (oneway), you can use Azure SignalR Service without having Asp.net Core SignalR Hub (Web App).  </p><p><a href="https://3.bp.blogspot.com/-08oxTexHUVs/W3MEszoS2PI/AAAAAAAGybQ/3PiWPWl8ZmUyxmgpc2X07Ds4EUIIkiqGwCLcBGAs/s1600/Duplex%2BArchitecture.png" target="_blank" rel="noopener"><img src="https://3.bp.blogspot.com/-08oxTexHUVs/W3MEszoS2PI/AAAAAAAGybQ/3PiWPWl8ZmUyxmgpc2X07Ds4EUIIkiqGwCLcBGAs/s640/Duplex%2BArchitecture.png" alt></a></p><p><a href="https://2.bp.blogspot.com/-wkOE5IqMqyY/W3MbZd79QQI/AAAAAAAGyck/Q_ZHrXxe8QoNSZI4pOTFXThbUUiNXT4wACLcBGAs/s1600/Broadcast%2BArchitecture.png" target="_blank" rel="noopener"><img src="https://2.bp.blogspot.com/-wkOE5IqMqyY/W3MbZd79QQI/AAAAAAAGyck/Q_ZHrXxe8QoNSZI4pOTFXThbUUiNXT4wACLcBGAs/s640/Broadcast%2BArchitecture.png" alt></a></p><p>In the diagram above, we have two endpoints called Server Endpoint and Client End Point. With those End Points, SignalR Server and Client can connect to Azure SignalR Service without the need of Asp.net Core Web App.  </p><p>Azure SignalR Service exposed set of REST APIs to send messages to all clients from anywhere using any programming language or any REST client such as Postman. The Server REST API swagger documentation is in the following link.  </p><p><a href="https://github.com/Azure/azure-signalr/blob/dev/docs/swagger.json" target="_blank" rel="noopener">https://github.com/Azure/azure-signalr/blob/dev/docs/swagger.json</a>  </p><h4 id="Server-Endpoint"><a href="#Server-Endpoint" class="headerlink" title="Server Endpoint"></a>Server Endpoint</h4><p>REST APIs are only exposed on port 5002. In each HTTP request, an authorization header with a  <a href="https://en.wikipedia.org/wiki/JSON_Web_Token" target="_blank" rel="noopener">JSON Web Token (JWT)</a>  is required to authenticate with Azure SignalR Service. You should use the AccessKey in Azure SignalR Service instance’s connection string to sign the generated JWT token.  </p><p><strong>Rest API URL</strong>  </p><p>POST  _https://&lt;service_endpoint&gt;:5002/api/v1-preview/hub/&lt;hub_name&gt;_  </p><p>The body of the request is a JSON object with two properties:  </p><p><em>Target: The target method you want to call in clients.</em><br><em>Arguments: an array of arguments you want to send to clients.</em>  </p><p>The API service authenticates REST call using JWT token, when you are generating the  <a href="https://en.wikipedia.org/wiki/JSON_Web_Token" target="_blank" rel="noopener">JWT token</a>, use the access key in SignalR service connection string as a Secret Key and put it in authentication header.  </p><h4 id="Client-Endpoint"><a href="#Client-Endpoint" class="headerlink" title="Client Endpoint"></a>Client Endpoint</h4><p>_https://&lt;service_endpoint&gt;:5001/client/?hub=<hubname>_  </hubname></p><p>Clients also connect to Azure SignalR service using JWT token same as described above and each client will use some unique user id and the Client Endpoint URL to generate the token.  </p><p>With all the details above, let us build a simple .Net Core Console App to broadcast messages using Azure SignalR Service.  </p><h3 id="Architecture"><a href="#Architecture" class="headerlink" title="Architecture"></a>Architecture</h3><p>In this demo, we will see how the SignalR Console App server connect to Azure SignalR Service with REST API call to broadcast the messages to all connected console app clients in real time.  </p><p><a href="https://3.bp.blogspot.com/-5_ovgO2RVvg/W3MGhn6qs9I/AAAAAAAGybg/Y0oBrrSLMgM5JHwnPg6h74DwtD-qhwKLQCLcBGAs/s1600/Architecture.png" target="_blank" rel="noopener"><img src="https://3.bp.blogspot.com/-5_ovgO2RVvg/W3MGhn6qs9I/AAAAAAAGybg/Y0oBrrSLMgM5JHwnPg6h74DwtD-qhwKLQCLcBGAs/s640/Architecture.png" alt></a></p><h3 id="Steps"><a href="#Steps" class="headerlink" title="Steps"></a>Steps</h3><h4 id="Creating-Projects"><a href="#Creating-Projects" class="headerlink" title="Creating Projects"></a>Creating Projects</h4><p>We will be creating following three projects.  </p><p><a href="https://3.bp.blogspot.com/-HyhJvU5KYnI/W3MHy3KE1rI/AAAAAAAGycM/qXnGM01A5qoSXxMBGCms_F3VJQyC3usjQCEwYBhgL/s1600/Solutions.png" target="_blank" rel="noopener"><img src="https://3.bp.blogspot.com/-HyhJvU5KYnI/W3MHy3KE1rI/AAAAAAAGycM/qXnGM01A5qoSXxMBGCms_F3VJQyC3usjQCEwYBhgL/s320/Solutions.png" alt></a></p><ul><li>AzureSignalRConsoleApp.Server - .Net Core Console App</li><li>AzureSignalRConsoleApp.Client - .Net Core Console App</li><li>AzureSignalRConsoleApp.Utils - .Net Core Class Library</li></ul><h4 id="AzureSignalRConsoleApp-Utils"><a href="#AzureSignalRConsoleApp-Utils" class="headerlink" title="AzureSignalRConsoleApp.Utils"></a>AzureSignalRConsoleApp.Utils</h4><p>This class library holds the logic to generate the JWT token based on the access key from Azure Connection string. It also holds the method to parse the Azure SignalR Connection String to get the endpoint and access key.  </p><p><strong>Nuget Packages Required</strong>  </p><ul><li>System.IdentityModel.Tokens.Jwt</li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ServiceUtils</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> JwtSecurityTokenHandler JwtTokenHandler = <span class="keyword">new</span> JwtSecurityTokenHandler();</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">string</span> Endpoint &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">string</span> AccessKey &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">ServiceUtils</span>(<span class="params"><span class="keyword">string</span> connectionString</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            (Endpoint, AccessKey) = ParseConnectionString(connectionString);</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">string</span> <span class="title">GenerateAccessToken</span>(<span class="params"><span class="keyword">string</span> audience, <span class="keyword">string</span> userId, TimeSpan? lifetime = <span class="literal">null</span></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            IEnumerable&lt;claim&gt; claims = <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">if</span> (userId != <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                claims = <span class="keyword">new</span>[]</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">new</span> Claim(ClaimTypes.NameIdentifier, userId)</span><br><span class="line">                &#125;;</span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line">            <span class="keyword">return</span> GenerateAccessTokenInternal(audience, claims, lifetime ?? TimeSpan.FromHours(<span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">string</span> <span class="title">GenerateAccessTokenInternal</span>(<span class="params"><span class="keyword">string</span> audience, IEnumerable&lt;claim&gt; claims, TimeSpan lifetime</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">var</span> expire = DateTime.UtcNow.Add(lifetime);</span><br><span class="line"> </span><br><span class="line">            <span class="keyword">var</span> securityKey = <span class="keyword">new</span> SymmetricSecurityKey(Encoding.UTF8.GetBytes(AccessKey));</span><br><span class="line">            <span class="keyword">var</span> credentials = <span class="keyword">new</span> SigningCredentials(securityKey, SecurityAlgorithms.HmacSha256);</span><br><span class="line"> </span><br><span class="line">            <span class="keyword">var</span> token = JwtTokenHandler.CreateJwtSecurityToken(</span><br><span class="line">                issuer: <span class="literal">null</span>,</span><br><span class="line">                audience: audience,</span><br><span class="line">                subject: claims == <span class="literal">null</span> ? <span class="literal">null</span> : <span class="keyword">new</span> ClaimsIdentity(claims),</span><br><span class="line">                expires: expire,</span><br><span class="line">                signingCredentials: credentials);</span><br><span class="line">            <span class="keyword">return</span> JwtTokenHandler.WriteToken(token);</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="keyword">char</span>[] PropertySeparator = &#123; <span class="string">';'</span> &#125;;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="keyword">char</span>[] KeyValueSeparator = &#123; <span class="string">'='</span> &#125;;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">const</span> <span class="keyword">string</span> EndpointProperty = <span class="string">"endpoint"</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">const</span> <span class="keyword">string</span> AccessKeyProperty = <span class="string">"accesskey"</span>;</span><br><span class="line"> </span><br><span class="line">        <span class="function"><span class="keyword">internal</span> <span class="title">static</span> (<span class="params"><span class="keyword">string</span>, <span class="keyword">string</span></span>) <span class="title">ParseConnectionString</span>(<span class="params"><span class="keyword">string</span> connectionString</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">var</span> properties = connectionString.Split(PropertySeparator, StringSplitOptions.RemoveEmptyEntries);</span><br><span class="line">            <span class="keyword">if</span> (properties.Length &gt; <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">var</span> dict = <span class="keyword">new</span> Dictionary&lt;<span class="keyword">string</span> <span class="keyword">string</span>=<span class="string">""</span>&lt;(StringComparer.OrdinalIgnoreCase);</span><br><span class="line">                <span class="keyword">foreach</span> (<span class="keyword">var</span> property <span class="keyword">in</span> properties)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">var</span> kvp = property.Split(KeyValueSeparator, <span class="number">2</span>);</span><br><span class="line">                    <span class="keyword">if</span> (kvp.Length != <span class="number">2</span>) <span class="keyword">continue</span>;</span><br><span class="line"> </span><br><span class="line">                    <span class="keyword">var</span> key = kvp[<span class="number">0</span>].Trim();</span><br><span class="line">                    <span class="keyword">if</span> (dict.ContainsKey(key))</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentException(<span class="string">$"Duplicate properties found in connection string: <span class="subst">&#123;key&#125;</span>."</span>);</span><br><span class="line">                    &#125;</span><br><span class="line"> </span><br><span class="line">                    dict.Add(key, kvp[<span class="number">1</span>].Trim());</span><br><span class="line">                &#125;</span><br><span class="line"> </span><br><span class="line">                <span class="keyword">if</span> (dict.ContainsKey(EndpointProperty) &amp;&amp; dict.ContainsKey(AccessKeyProperty))</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">return</span> (dict[EndpointProperty].TrimEnd(<span class="string">'/'</span>), dict[AccessKeyProperty]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentException(<span class="string">$"Connection string missing required properties <span class="subst">&#123;EndpointProperty&#125;</span> and <span class="subst">&#123;AccessKeyProperty&#125;</span>."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="AzureSignalRConsoleApp-Server"><a href="#AzureSignalRConsoleApp-Server" class="headerlink" title="AzureSignalRConsoleApp.Server"></a>AzureSignalRConsoleApp.Server</h4><p>This is the .net core SignalR Server console app to broadcast the messages via REST API call.  </p><p><strong>Nuget Packages Required</strong>  </p><ul><li>Microsoft.Extensions.Configuration.UserSecrets</li></ul><p><strong>Steps</strong>  </p><ul><li>Login to Azure Portal and get the Azure SignalR Service Connection String and store it in UserSecrets.json.</li></ul><p><a href="https://2.bp.blogspot.com/-aRWg-Ssz3so/W3MHFLL8FqI/AAAAAAAGybo/Fs9Ma9bBxCAYfK0_ICS9K1Ofi3Vyn63cQCLcBGAs/s1600/SignalR%2BService%2B-%2BEnd%2BPoint.png" target="_blank" rel="noopener"><img src="https://2.bp.blogspot.com/-aRWg-Ssz3so/W3MHFLL8FqI/AAAAAAAGybo/Fs9Ma9bBxCAYfK0_ICS9K1Ofi3Vyn63cQCLcBGAs/s640/SignalR%2BService%2B-%2BEnd%2BPoint.png" alt></a></p><ul><li>Visual Studio does not provide the built-in support to manage User Secrets for .Net Core Console App. We have to manually create UserSecretsID element under PropertyGroup in the .csproj file and put the randomly generated GUID as below.</li></ul><p><a href="https://4.bp.blogspot.com/-1zj7ligZnfc/W3MHO2wJnxI/AAAAAAAGybs/mpThM2-PL6k17iLv7vUndoxcFy51aEuswCLcBGAs/s1600/UserSecrets.png" target="_blank" rel="noopener"><img src="https://4.bp.blogspot.com/-1zj7ligZnfc/W3MHO2wJnxI/AAAAAAAGybs/mpThM2-PL6k17iLv7vUndoxcFy51aEuswCLcBGAs/s640/UserSecrets.png" alt></a></p><ul><li>Open the command window from the root project location and run the following command to create secrets.json file with the configuration data</li></ul><p><em>dotnet user-secrets set key value</em></p><p><a href="https://4.bp.blogspot.com/-czcyoay7tYc/W3MHUBJr0PI/AAAAAAAGybw/nnBW-9WZEk8neO97-hOn2WNIXqtbkrGKgCLcBGAs/s1600/UserSecrets%2BSet.png" target="_blank" rel="noopener"><img src="https://4.bp.blogspot.com/-czcyoay7tYc/W3MHUBJr0PI/AAAAAAAGybw/nnBW-9WZEk8neO97-hOn2WNIXqtbkrGKgCLcBGAs/s640/UserSecrets%2BSet.png" alt></a></p><ul><li>Goto %APPDATA%\Microsoft\UserSecrets Folder to verify the new folder exists in the same GUID and the secrets.json file is created with configuration data.</li></ul><p><a href="https://3.bp.blogspot.com/-GzN7OluXmoA/W3MICEz8_mI/AAAAAAAGycI/t7F_mWALPtE1J8wBiWj0IqNAdws7mf7uQCLcBGAs/s1600/UserSecrets%2BView.png" target="_blank" rel="noopener"><img src="https://3.bp.blogspot.com/-GzN7OluXmoA/W3MICEz8_mI/AAAAAAAGycI/t7F_mWALPtE1J8wBiWj0IqNAdws7mf7uQCLcBGAs/s640/UserSecrets%2BView.png" alt></a></p><ul><li>After the above setup configured successfully, we can load the configuration object with the following code.</li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> configuration = <span class="keyword">new</span> ConfigurationBuilder()</span><br><span class="line">               .SetBasePath(Directory.GetCurrentDirectory())</span><br><span class="line">               .AddUserSecrets&lt;program&gt;()</span><br><span class="line">               .Build();</span><br></pre></td></tr></table></figure><ul><li>Broadcast method will take the input message from console window, build the httprequest along with generated JWT token in authorization header and make the REST API call to push the messages.<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">amespace AzureSignalRConsoleApp.Server</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> HttpClient httpClient = <span class="keyword">new</span> HttpClient();</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="keyword">string</span> hubName = <span class="string">"ConsoleAppBroadcaster"</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="keyword">string</span> serverName = <span class="string">"Azure_SignalR_Server_1"</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> ServiceUtils serviceUtils;</span><br><span class="line"> </span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="comment">//Loading the Configuration Objects from UserSecrets</span></span><br><span class="line">            <span class="keyword">var</span> configuration = <span class="keyword">new</span> ConfigurationBuilder()</span><br><span class="line">               .SetBasePath(Directory.GetCurrentDirectory())</span><br><span class="line">               .AddUserSecrets&lt;program&gt;()</span><br><span class="line">               .Build();</span><br><span class="line"> </span><br><span class="line">            serviceUtils = <span class="keyword">new</span> ServiceUtils(configuration[<span class="string">"Azure:SignalR:ConnectionString"</span>]);</span><br><span class="line"> </span><br><span class="line">            Console.WriteLine(<span class="string">" Azure SignalR Server Started.\n "</span> +</span><br><span class="line">                              <span class="string">"Start typing and press enter to broadcast messages to all the connected clients.\n "</span> +</span><br><span class="line">                              <span class="string">"Type quit to shut down the server!"</span>);</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">var</span> data = Console.ReadLine();</span><br><span class="line">                <span class="keyword">if</span> (data.ToLower() == <span class="string">"quit"</span>) <span class="keyword">break</span>;</span><br><span class="line">                Broadcast(data);</span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line">            Console.WriteLine(<span class="string">"SignalR Server is shutting down"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">async</span> <span class="keyword">void</span> <span class="title">Broadcast</span>(<span class="params"><span class="keyword">string</span> message</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">var</span> url = <span class="string">$"<span class="subst">&#123;serviceUtils.Endpoint&#125;</span>:5002/api/v1-preview/hub/<span class="subst">&#123;hubName.ToLower()&#125;</span>"</span>;</span><br><span class="line">            <span class="keyword">var</span> request = <span class="keyword">new</span> HttpRequestMessage(HttpMethod.Post, <span class="keyword">new</span> UriBuilder(url).Uri);</span><br><span class="line"> </span><br><span class="line">            request.Headers.Authorization =</span><br><span class="line">                <span class="keyword">new</span> AuthenticationHeaderValue(<span class="string">"Bearer"</span>, serviceUtils.GenerateAccessToken(url, serverName));</span><br><span class="line">            request.Headers.Accept.Add(<span class="keyword">new</span> MediaTypeWithQualityHeaderValue(<span class="string">"application/json"</span>));</span><br><span class="line">            <span class="keyword">var</span> messageContent = <span class="keyword">new</span> MessageContent() &#123; Target = <span class="string">"SendMessage"</span>, Arguments = <span class="keyword">new</span>[] &#123; serverName, message &#125; &#125;;</span><br><span class="line">            request.Content = <span class="keyword">new</span> StringContent(JsonConvert.SerializeObject(messageContent), Encoding.UTF8, <span class="string">"application/json"</span>);</span><br><span class="line"> </span><br><span class="line">            <span class="keyword">var</span> response = <span class="keyword">await</span> httpClient.SendAsync(request);</span><br><span class="line">            <span class="keyword">if</span> (response.StatusCode != HttpStatusCode.Accepted)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">$"Sent error: <span class="subst">&#123;response.StatusCode&#125;</span>"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MessageContent</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">string</span> Target &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">object</span>[] Arguments &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="AzureSignalRConsoleApp-Client"><a href="#AzureSignalRConsoleApp-Client" class="headerlink" title="AzureSignalRConsoleApp.Client"></a>AzureSignalRConsoleApp.Client</h4><p>This is the .net core SignalR Client console app to receive the messages from Azure SignalR Service.  </p><p><strong>Nuget Packages Required</strong>  </p><ul><li>Microsoft.Extensions.Configuration.UserSecrets</li><li>Microsoft.AspNetCore.SignalR.Client</li></ul><p><strong>Steps</strong>  </p><ul><li><p>In order to load the configuration object from User Secrets to load the Azure Connection String, we must follow the same steps as above.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> configuration = <span class="keyword">new</span> ConfigurationBuilder()</span><br><span class="line">               .SetBasePath(Directory.GetCurrentDirectory())</span><br><span class="line">               .AddUserSecrets&lt;program&gt;()</span><br><span class="line">               .Build();</span><br></pre></td></tr></table></figure></li><li><p>Generate the JWT access token using client endpoint URL and create hub connection with the client hub URL and the access token to establish the connection with Azure SignalR Service. In the Hub connection ON event, wire up with the same Target method to receive the message.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">AzureSignalRConsoleApp.Client</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="keyword">string</span> userId = <span class="string">$"User <span class="subst">&#123;new Random().Next(<span class="number">1</span>, <span class="number">99</span>)&#125;</span>"</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> ServiceUtils serviceUtils;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="keyword">string</span> hubName = <span class="string">"ConsoleAppBroadcaster"</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> HubConnection hubConnection;</span><br><span class="line"> </span><br><span class="line">        <span class="function"><span class="keyword">async</span> <span class="keyword">static</span> Task <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">var</span> configuration = <span class="keyword">new</span> ConfigurationBuilder()</span><br><span class="line">                .SetBasePath(Directory.GetCurrentDirectory())</span><br><span class="line">                .AddUserSecrets&lt;program&gt;()</span><br><span class="line">                .Build();</span><br><span class="line"> </span><br><span class="line">            serviceUtils = <span class="keyword">new</span> ServiceUtils(configuration[<span class="string">"Azure:SignalR:ConnectionString"</span>]);</span><br><span class="line"> </span><br><span class="line">            <span class="keyword">var</span> url = <span class="string">$"<span class="subst">&#123;serviceUtils.Endpoint&#125;</span>:5001/client/?hub=<span class="subst">&#123;hubName&#125;</span>"</span>;</span><br><span class="line"> </span><br><span class="line">            hubConnection = <span class="keyword">new</span> HubConnectionBuilder()</span><br><span class="line">                .WithUrl(url, option =&gt;</span><br><span class="line">                &#123;</span><br><span class="line">                    option.AccessTokenProvider = () =&gt;</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">return</span> Task.FromResult(serviceUtils.GenerateAccessToken(url, userId));</span><br><span class="line">                    &#125;;</span><br><span class="line">                &#125;).Build();</span><br><span class="line"> </span><br><span class="line">            hubConnection.On&lt;<span class="keyword">string</span> <span class="keyword">string</span>=<span class="string">""</span>&gt;(<span class="string">"SendMessage"</span>,</span><br><span class="line">                (<span class="keyword">string</span> server, <span class="keyword">string</span> message) =&gt;</span><br><span class="line">                &#123;</span><br><span class="line">                    Console.WriteLine(<span class="string">$"Message from server <span class="subst">&#123;server&#125;</span>: <span class="subst">&#123;message&#125;</span>"</span>);</span><br><span class="line">                &#125;);</span><br><span class="line"> </span><br><span class="line">            <span class="keyword">await</span> hubConnection.StartAsync();</span><br><span class="line">            Console.WriteLine(<span class="string">"Client started... Press any key to close the connection"</span>);</span><br><span class="line">            Console.ReadLine();</span><br><span class="line">            <span class="keyword">await</span> hubConnection.DisposeAsync();</span><br><span class="line">            Console.WriteLine(<span class="string">"Client is shutting down..."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="How-it-works"><a href="#How-it-works" class="headerlink" title="How it works"></a>How it works</h3><p>Now that, we have completed the code, let us run the application to see the demo. First, launch the server and then launch more than one client app in multiple command window. After that, start typing in server command window to send messages to all the clients in real-time.<br><a href="https://1.bp.blogspot.com/-CiH_E7jp6bE/W3MKbfPLqdI/AAAAAAAGycc/ABJyqSCkP8wuPovzJgA_pJkgHudzA5_CwCLcBGAs/s1600/how_it_works_demo.gif" target="_blank" rel="noopener"><img src="https://1.bp.blogspot.com/-CiH_E7jp6bE/W3MKbfPLqdI/AAAAAAAGycc/ABJyqSCkP8wuPovzJgA_pJkgHudzA5_CwCLcBGAs/s1600/how_it_works_demo.gif" alt></a></p><h3 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h3><p>In this article, we discussed how to use Azure SignalR Service in .net core console app without using Asp.net Core Web App. In Real World, Azure SignalR Service can be integrated with other Azure services like serverless computing (Azure Functions) to push notification messages to all the connected clients in real time based on some trigger without hosting Asp.net Core Web App and managing the connection with clients. I have uploaded the entire source code in my <a href="https://github.com/vavjeeva/AzureSignalRConsoleApp" target="_blank" rel="noopener">GitHub</a> repository.</p><p>Happy Coding!</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://2.bp.blogspot.com/-CkqyHBfVka0/W3MecQh3mTI/AAAAAAAGycw/VksPWJI4r8sNNnyDGit-3hvIgGWjPFwyACLcBGAs/s640/Article%2BTitle.png&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;Real-time technologies are now part of every modern applications and SignalR is the most popular .net library to create real time scenarios. Recently Microsoft announced the &lt;a href=&quot;https://azure.microsoft.com/en-us/blog/azure-signalr-service-a-fully-managed-service-to-add-real-time-functionality/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;public preview of Azure SignalR&lt;/a&gt;, a cloud based fully managed service to build real time application without worrying about capacity provisioning, scaling, or persistent connections. In this article, we are going to discuss about how to create .Net Core SignalR server console app to broadcast the messages to all the connected clients in real-time without using Asp.net Core SignalR Web App.  &lt;/p&gt;
    
    </summary>
    
    
      <category term="C#" scheme="https://jeevasubburaj.com/tags/C/"/>
    
      <category term=".Net Core" scheme="https://jeevasubburaj.com/tags/Net-Core/"/>
    
      <category term="Azure" scheme="https://jeevasubburaj.com/tags/Azure/"/>
    
      <category term="SignalR" scheme="https://jeevasubburaj.com/tags/SignalR/"/>
    
      <category term="HttpClient" scheme="https://jeevasubburaj.com/tags/HttpClient/"/>
    
  </entry>
  
  <entry>
    <title>Asp.Net Core Basics- Accessing Configuration Settings from Multiple Sources</title>
    <link href="https://jeevasubburaj.com/2018/07/28/aspnet-core-basics-accessing/"/>
    <id>https://jeevasubburaj.com/2018/07/28/aspnet-core-basics-accessing/</id>
    <published>2018-07-28T18:57:00.000Z</published>
    <updated>2019-03-15T17:32:14.792Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://4.bp.blogspot.com/-iMhZ2a58f3E/W1zDPLQFqTI/AAAAAAAGvtw/9UfNHLxQ1IIvoVQmFOgKED9_DiMKHYhKwCLcBGAs/s400/Title%2BImage_Accessing%2BConfiguration%2BSettings%2Bfrom%2BMultiple%2BSources.png" alt> In older Asp.Net Version, we typically store the configuration settings in web.config and access it using <strong>ConfigurationManager</strong> Class. This worked well in the past however it is not good enough for modern technologies like hosting in cloud or container based solutions. Moreover, storing the sensitive data in web.config poses security risk if the file is check in to source control by accident.</p><a id="more"></a><p>In Asp.Net Core , Configuration API was introduced to access the key value pair data from various sources in the order they are configured which allows you to access the configuration keys using Configuration Class regardless of where the keys are stored. If the same key value pair is stored in more than one places, the latest in order of precedence will overwrite the other values. Let’s dive into the demo to see how it works.  </p><h3 id="Order-of-Precedence"><a href="#Order-of-Precedence" class="headerlink" title="Order of Precedence"></a>Order of Precedence</h3><p>By default, ASP.Net Core version 2.0, the configuration providers order of precedence is hidden in Program.cs behind the method call <strong>CreateDefaultBuilder()</strong>. If you look at source code from github, you will see that it loads the data in following order.  </p><ol><li>appsettings.json file</li><li>appsettings.{env.EnvironmentName}.json file</li><li>The local User Secrets File (local development environment only)</li><li>Environment Variables</li><li>Command Line Arguments</li></ol><p><a href="https://2.bp.blogspot.com/-rXQW_8t4N-E/W1y88K6cBeI/AAAAAAAGvsI/twn0n5oTu44jBSYgeNit7Izqx2O0yrHKQCLcBGAs/s1600/1%255B1%255D.png" target="_blank" rel="noopener"><img src="https://2.bp.blogspot.com/-rXQW_8t4N-E/W1y88K6cBeI/AAAAAAAGvsI/twn0n5oTu44jBSYgeNit7Izqx2O0yrHKQCLcBGAs/s1600/1%255B1%255D.png" alt></a></p><p>In Addition to that, you can also create custom providers by implementing <strong>IConfigurationSource</strong> interface and add it into the processing pipeline. Asp.net core also supports reading from xml file in addition to json file.  </p><h3 id="How-it-Works-–-Demo"><a href="#How-it-Works-–-Demo" class="headerlink" title="How it Works – Demo"></a>How it Works – Demo</h3><p>In this Demo, we will see how to read and display the configuration key that are available from various sources and what value is displaying based on order of precedence. Launch the visual studio and create a new Asp.net Core Empty Web Application.  </p><p><a href="https://3.bp.blogspot.com/-DGH5LGt4VLA/W1y9W5uB0oI/AAAAAAAGvsQ/Q-_6QLUWm4UN24FU2emJSujVSiwrzvCBQCEwYBhgL/s1600/2.png" target="_blank" rel="noopener"><img src="https://3.bp.blogspot.com/-DGH5LGt4VLA/W1y9W5uB0oI/AAAAAAAGvsQ/Q-_6QLUWm4UN24FU2emJSujVSiwrzvCBQCEwYBhgL/s1600/2.png" alt></a></p><p>After the empty project is created, add the AppSettings.json item into the project.  </p><p><a href="https://4.bp.blogspot.com/-aSEu6XKKD4g/W1y9adUeObI/AAAAAAAGvtY/00YGYWdEWHMnrDfp-UpiA4A4M82snJQDQCEwYBhgL/s1600/3.png" target="_blank" rel="noopener"><img src="https://4.bp.blogspot.com/-aSEu6XKKD4g/W1y9adUeObI/AAAAAAAGvtY/00YGYWdEWHMnrDfp-UpiA4A4M82snJQDQCEwYBhgL/s1600/3.png" alt></a></p><p>Add the new key value pair item called DemoConfigKey in the AppSettings.json and set the value as “Value from AppSettings.json”  </p><p><a href="https://1.bp.blogspot.com/-khdcjt_Df4M/W1y9azCcNbI/AAAAAAAGvtI/PqJRyN8QikoItmKCAyJnT5LM_vQisO1sACEwYBhgL/s1600/4.png" target="_blank" rel="noopener"><img src="https://1.bp.blogspot.com/-khdcjt_Df4M/W1y9azCcNbI/AAAAAAAGvtI/PqJRyN8QikoItmKCAyJnT5LM_vQisO1sACEwYBhgL/s1600/4.png" alt></a></p><p>In order to access the value from configuration object we need to use Startup constructor as shown below.  </p><p><a href="https://3.bp.blogspot.com/-ve8ATMJwfvY/W1y9bTtW0WI/AAAAAAAGvtM/qNPEmuOy0WMpcdOrz-0FYuJSR14THvzGACEwYBhgL/s1600/5.png" target="_blank" rel="noopener"><img src="https://3.bp.blogspot.com/-ve8ATMJwfvY/W1y9bTtW0WI/AAAAAAAGvtM/qNPEmuOy0WMpcdOrz-0FYuJSR14THvzGACEwYBhgL/s1600/5.png" alt></a></p><p>After we added the Startup constructor with the parameter of type IConfiguration, we can store the injected IConfiguration object into local variable and then use it anywhere within ConfigureServices() and Configure() and also we can access it from other controller via dependency injection passing the IConfiguration object in Controller Constructor.  </p><p>In order to print the config value, I have just modified the default Configure method like below. This will print the value reading from configuration sources defined in the order.  </p><p><a href="https://3.bp.blogspot.com/-cMpjoIe6gWU/W1y9b0sf7gI/AAAAAAAGvtQ/HLs5TWy1c10Fn6h1QTLzliNHy8Agt1z9gCEwYBhgL/s1600/6.png" target="_blank" rel="noopener"><img src="https://3.bp.blogspot.com/-cMpjoIe6gWU/W1y9b0sf7gI/AAAAAAAGvtQ/HLs5TWy1c10Fn6h1QTLzliNHy8Agt1z9gCEwYBhgL/s1600/6.png" alt></a></p><p>When I run the application, you will see the result below reading from AppSettings.json.  </p><p><a href="https://1.bp.blogspot.com/-ls2llbcWlCU/W1y9cah1YzI/AAAAAAAGvtU/gQV1TOajVyAL-KlexaRY-pyqWcC4DV1egCEwYBhgL/s1600/7.png" target="_blank" rel="noopener"><img src="https://1.bp.blogspot.com/-ls2llbcWlCU/W1y9cah1YzI/AAAAAAAGvtU/gQV1TOajVyAL-KlexaRY-pyqWcC4DV1egCEwYBhgL/s1600/7.png" alt></a></p><h3 id="Appsettings-env-EnvironmentName-json-File"><a href="#Appsettings-env-EnvironmentName-json-File" class="headerlink" title="Appsettings.{env.EnvironmentName}.json File"></a>Appsettings.{env.EnvironmentName}.json File</h3><p>This file is used to override the keys in appsettings.json with deployment environment specific settings. For Example a file named appsettings.production.json would contain values specific to production.  </p><p>By Default, Asp.net Core Environment is Development. You can modify it in Visual Studio by changing it in Project Properties if needed.  </p><p><a href="https://3.bp.blogspot.com/-ojIlXSbP2gw/W1y9c4Hn-9I/AAAAAAAGvtY/PnrUZSyp1QQiAO3c2tVXN6G2yO58EvaigCEwYBhgL/s1600/8.png" target="_blank" rel="noopener"><img src="https://3.bp.blogspot.com/-ojIlXSbP2gw/W1y9c4Hn-9I/AAAAAAAGvtY/PnrUZSyp1QQiAO3c2tVXN6G2yO58EvaigCEwYBhgL/s1600/8.png" alt></a></p><p>Let’s add the environment specific AppSettings.Development.json file into the project.  </p><p><a href="https://3.bp.blogspot.com/-ej7X5m1_Wto/W1y9dV0nP4I/AAAAAAAGvtc/p7KZOhU0fmogMQpM_IeKLJuwX3RH2kxqwCEwYBhgL/s1600/9.png" target="_blank" rel="noopener"><img src="https://3.bp.blogspot.com/-ej7X5m1_Wto/W1y9dV0nP4I/AAAAAAAGvtc/p7KZOhU0fmogMQpM_IeKLJuwX3RH2kxqwCEwYBhgL/s1600/9.png" alt></a></p><p>Add the value for DemoConfigKey as “Value from AppSettings.Development.json”  </p><p><a href="https://4.bp.blogspot.com/-1vKdoSacIfw/W1y9YhbUMvI/AAAAAAAGvtY/jyf9L9Tma7Y-rnXZU6d3aGk0DyBC9PVKQCEwYBhgL/s1600/10.png" target="_blank" rel="noopener"><img src="https://4.bp.blogspot.com/-1vKdoSacIfw/W1y9YhbUMvI/AAAAAAAGvtY/jyf9L9Tma7Y-rnXZU6d3aGk0DyBC9PVKQCEwYBhgL/s1600/10.png" alt></a></p><p>Let’s run the application and see the result. We should get the value from AppSettings.Development.json by overwriting the value from AppSettings.json based on the order of precedence.  </p><p><a href="https://2.bp.blogspot.com/-Xl64jxqbeu0/W1y9Yv-56EI/AAAAAAAGvtI/KrZLPfeZOsgoDYDDunBKK9njFSJaxWuKACEwYBhgL/s1600/11.png" target="_blank" rel="noopener"><img src="https://2.bp.blogspot.com/-Xl64jxqbeu0/W1y9Yv-56EI/AAAAAAAGvtI/KrZLPfeZOsgoDYDDunBKK9njFSJaxWuKACEwYBhgL/s1600/11.png" alt></a></p><h3 id="User-Secrets"><a href="#User-Secrets" class="headerlink" title="User Secrets"></a>User Secrets</h3><p>The User Secrets file is a JSON file stored on the local developer machine. This file is unencrypted and stored outside of the solution directory (under user profile directory) and, therefore, is not checked into source control by accident. The user secrets file is used only for local development overrides like connecting to a local database server or development server API key values etc. These configuration values are only relevant to the local developer and any other developer / machine cannot access those values.  </p><p>To add the UserSecrects.json file, right click on the project file and select Manage User Secrets.  </p><p><a href="https://1.bp.blogspot.com/-KNoMUwKOHt8/W1y9Yqm0wYI/AAAAAAAGvtI/MHV8u5l6DjIHKrOjFOXcyD-44juLMfIDACEwYBhgL/s1600/12.png" target="_blank" rel="noopener"><img src="https://1.bp.blogspot.com/-KNoMUwKOHt8/W1y9Yqm0wYI/AAAAAAAGvtI/MHV8u5l6DjIHKrOjFOXcyD-44juLMfIDACEwYBhgL/s1600/12.png" alt></a></p><p>Add the Same key and set the different value as below.  </p><p><a href="https://3.bp.blogspot.com/-z8vfDlUioSQ/W1y9ZFrJK5I/AAAAAAAGvtM/za2bTko2YEglIDQJ3jH3ld0SuHp7iUa9wCEwYBhgL/s1600/13.png" target="_blank" rel="noopener"><img src="https://3.bp.blogspot.com/-z8vfDlUioSQ/W1y9ZFrJK5I/AAAAAAAGvtM/za2bTko2YEglIDQJ3jH3ld0SuHp7iUa9wCEwYBhgL/s1600/13.png" alt></a></p><p>Lets run the application and it should override all the other key values and put the value from Secrets.json  </p><p><a href="https://3.bp.blogspot.com/-TghjP29AfHo/W1y9ZS7cnOI/AAAAAAAGvtQ/Iuyel5oihkUiSQ-z6X0QPxBeYBPVp6G4ACEwYBhgL/s1600/14.png" target="_blank" rel="noopener"><img src="https://3.bp.blogspot.com/-TghjP29AfHo/W1y9ZS7cnOI/AAAAAAAGvtQ/Iuyel5oihkUiSQ-z6X0QPxBeYBPVp6G4ACEwYBhgL/s1600/14.png" alt></a></p><h3 id="Environment-Variables"><a href="#Environment-Variables" class="headerlink" title="Environment Variables"></a>Environment Variables</h3><p>Environment variables used mostly in container-based solutions like Docker Compose and Kubernetes. Docker allows environment variables to be configured in a Docker file using the ENV instruction. For example:  </p><blockquote><p>ENV DemoConfigKey: Value from Docker Environment Variable</p></blockquote><p>See the Docker reference documentation for more details.  </p><h3 id="Command-Line-Variables"><a href="#Command-Line-Variables" class="headerlink" title="Command Line Variables"></a>Command Line Variables</h3><p>Command line arguments allow you to modify the configuration keys when running your application without modifying any files using the command line syntax of key=value.  </p><p>In this demo, we run the application in command line window as below.  </p><p><a href="https://2.bp.blogspot.com/-PUjh95Nk-XU/W1y9Zzmp4MI/AAAAAAAGvtI/Eg7ecJ_T3K8Xb6Xvmmw225fwxh2zQ_uEwCEwYBhgL/s1600/15.png" target="_blank" rel="noopener"><img src="https://2.bp.blogspot.com/-PUjh95Nk-XU/W1y9Zzmp4MI/AAAAAAAGvtI/Eg7ecJ_T3K8Xb6Xvmmw225fwxh2zQ_uEwCEwYBhgL/s1600/15.png" alt></a></p><p>When running the application, you will see the result as below  </p><p><a href="https://1.bp.blogspot.com/-A8xhamFLHEE/W1y-hSjEDjI/AAAAAAAGvtk/MOkuWGN-2PYD8JKdMf_e2t1vIhh4g_bPQCLcBGAs/s1600/16.png" target="_blank" rel="noopener"><img src="https://1.bp.blogspot.com/-A8xhamFLHEE/W1y-hSjEDjI/AAAAAAAGvtk/MOkuWGN-2PYD8JKdMf_e2t1vIhh4g_bPQCLcBGAs/s1600/16.png" alt></a></p><h3 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h3><p>Asp.net Core allows you to have same configuration key value pair in multiple places and allowing us to write the same code to access those values with the order of precedence regardless of it’s source. It also allows you to have multiple config file with different set of keys and load them all in one configuration object. It is very useful when you want to split the configuration settings into different file by module (Eg: All Database Related Key Value Pairs in one file) or any other category that suitable for your application. For the Cloud based solution, you should also consider using  <a href="https://azure.microsoft.com/en-us/services/key-vault/" target="_blank" rel="noopener">Azure Key vault</a> for storing your sensitive secrets data.  </p><p>As mentioned above, the default order of precedence was hidden behind the method CreateDefaultBuilder(args) . If you want to create a custom configuration provider, you can do that by implementing IConfigurationSource Interface. I hope this article helps you to understand how configuration data is getting accessed at runtime from various sources.  </p><p>Happy Coding!</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://4.bp.blogspot.com/-iMhZ2a58f3E/W1zDPLQFqTI/AAAAAAAGvtw/9UfNHLxQ1IIvoVQmFOgKED9_DiMKHYhKwCLcBGAs/s400/Title%2BImage_Accessing%2BConfiguration%2BSettings%2Bfrom%2BMultiple%2BSources.png&quot; alt&gt; In older Asp.Net Version, we typically store the configuration settings in web.config and access it using &lt;strong&gt;ConfigurationManager&lt;/strong&gt; Class. This worked well in the past however it is not good enough for modern technologies like hosting in cloud or container based solutions. Moreover, storing the sensitive data in web.config poses security risk if the file is check in to source control by accident.&lt;/p&gt;
    
    </summary>
    
    
      <category term="C#" scheme="https://jeevasubburaj.com/tags/C/"/>
    
      <category term="Asp.Net Core" scheme="https://jeevasubburaj.com/tags/Asp-Net-Core/"/>
    
      <category term=".Net Core" scheme="https://jeevasubburaj.com/tags/Net-Core/"/>
    
  </entry>
  
  <entry>
    <title>Real Time Communication to Cross Platform Devices using Azure SignalR Service</title>
    <link href="https://jeevasubburaj.com/2018/07/11/magic-paste-universal-paste-data-to-web/"/>
    <id>https://jeevasubburaj.com/2018/07/11/magic-paste-universal-paste-data-to-web/</id>
    <published>2018-07-11T18:16:00.003Z</published>
    <updated>2019-03-15T17:33:14.576Z</updated>
    
    <content type="html"><![CDATA[<p>In this article, i will discuss about how to do real time communication between cross platform devices such as .net core web app runs in Azure, xamarin based android app and Full .Net Framework based Windows Forms app running in Windows Operating System by sending and receiving data using Azure SignalR Service. In this two part of article series, i will create a tool called MagicPaste which will transfer the text content from one device to another in real time.  </p><p>This article provides an overview of architecture of Magic Paste tool and how to setup the SignalR Service in Azure SignalR Portal. It also provides the overview of how to develop SignalR Client Web , Android and Windows Forms App to communicate each other in real time using Azure SignalR Service.  </p><a id="more"></a>  <p><a href="https://1.bp.blogspot.com/-Ga630UF03pQ/W0YyeNzLlYI/AAAAAAAGun0/4sz-OG9W2D0Jcrp_8DrLzKaFT660Ku7dwCLcBGAs/s1600/MagicPaste_Overview.png" target="_blank" rel="noopener"><img src="https://1.bp.blogspot.com/-Ga630UF03pQ/W0YyeNzLlYI/AAAAAAAGun0/4sz-OG9W2D0Jcrp_8DrLzKaFT660Ku7dwCLcBGAs/s1600/MagicPaste_Overview.png" alt></a></p><h2 id="Architecture"><a href="#Architecture" class="headerlink" title="Architecture"></a>Architecture</h2><p><a href="https://4.bp.blogspot.com/-3qJNLRB0vYw/W0YeDrEjOTI/AAAAAAAGulk/7gx-sdAtnxU4mpAFANwYR0hQLpmZZDj1gCLcBGAs/s1600/Architecture.png" target="_blank" rel="noopener"><img src="https://4.bp.blogspot.com/-3qJNLRB0vYw/W0YeDrEjOTI/AAAAAAAGulk/7gx-sdAtnxU4mpAFANwYR0hQLpmZZDj1gCLcBGAs/s640/Architecture.png" alt></a></p><h2 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h2><div class="video-container"><iframe src="//www.youtube.com/embed/ecoz32RPnlc" frameborder="0" allowfullscreen></iframe></div><h2 id="Setting-up-Azure-SignalR-Service"><a href="#Setting-up-Azure-SignalR-Service" class="headerlink" title="Setting up Azure SignalR Service"></a>Setting up Azure SignalR Service</h2><p>Microsoft recently released the preview version Azure SignalR service which is a fully-managed service that allows developers to focus on building real-time web experiences without worrying about capacity provisioning, reliable connections, scaling, encryption or authentication. In this example, I setup the Azure SignalR Service with the Free Tier which allows the maximum of single unit with 100 connections. This would be suffcient for this demo.</p><h3 id="Steps"><a href="#Steps" class="headerlink" title="Steps"></a>Steps</h3><ul><li>Login to Azure Portal and Click Create a Resource and Search for SignalR Service in Market Place and click the Create button.  </li></ul><p><a href="https://4.bp.blogspot.com/-eqE7S-aql9Y/W0YkFYNARjI/AAAAAAAGul0/Uk4HphFB9CYKm05zzrpXsCfWPQezERyfwCEwYBhgL/s1600/SignalR%2BService%2B-%2BCreate.png" target="_blank" rel="noopener"><img src="https://4.bp.blogspot.com/-eqE7S-aql9Y/W0YkFYNARjI/AAAAAAAGul0/Uk4HphFB9CYKm05zzrpXsCfWPQezERyfwCEwYBhgL/s640/SignalR%2BService%2B-%2BCreate.png" alt></a></p><ul><li>Enter the resource name, Select the Subscription , Resource Group and the Free Pricing Tier and then click the Create Button.</li></ul><p><a href="https://4.bp.blogspot.com/-EqtVaMmZgrc/W0Yk_s2tJqI/AAAAAAAGul8/71792oMn1zICRoUm3PiMTe_E9O3rah1AQCLcBGAs/s1600/SignalR%2BService%2B-%2BSelect%2BTier.png" target="_blank" rel="noopener"><img src="https://4.bp.blogspot.com/-EqtVaMmZgrc/W0Yk_s2tJqI/AAAAAAAGul8/71792oMn1zICRoUm3PiMTe_E9O3rah1AQCLcBGAs/s640/SignalR%2BService%2B-%2BSelect%2BTier.png" alt></a></p><ul><li>We have now created the Azure SignalR Service succesfully. Navigate to the dashboard page of SignalR Service that we created just now and copy the EndPoint URL with the accesskeys under the Keys Section. User Access Keys are used to authenticate SignalR clients when making request to Azure SignalR Service. It is very important to keep these keys securely. During the development time, you can store the keys in usersecrets.json file so that it will not get checked in into source control by accident. When you deploy the SignalR Web Client App, you can deploy the keys into Azure Key Vault or AppSettings in Azure Web App Service.</li></ul><p><a href="https://2.bp.blogspot.com/-i63AvYgUjcY/W0YmdTtdmvI/AAAAAAAGumI/4zI7TShRY8YMArk3pQ-jst5N7blVYH9TgCLcBGAs/s1600/SignalR%2BService%2B-%2BEnd%2BPoint.png" target="_blank" rel="noopener"><img src="https://2.bp.blogspot.com/-i63AvYgUjcY/W0YmdTtdmvI/AAAAAAAGumI/4zI7TShRY8YMArk3pQ-jst5N7blVYH9TgCLcBGAs/s640/SignalR%2BService%2B-%2BEnd%2BPoint.png" alt></a></p><h3 id="Client-Apps"><a href="#Client-Apps" class="headerlink" title="Client Apps"></a>Client Apps</h3><p>We will develop the SignalR client applications to connect to Azure SignalR Service to do real time communication between cross platform devices. We are going to develop the following applications.</p><ul><li>Net Core We App to send and receive the data from the browser.</li><li>Net Framework (v4.6.1) based windows forms application that running in system tray with the global hot key registered (CTRL + SHIFT + C) to push the clipboard content to other devices whenever the hotkey is pressed.</li><li>Xamarin based Android App to receive the data from SignalR Hub in Local Notification Window.</li></ul><h3 id="Web-App-SignalR-Client-App"><a href="#Web-App-SignalR-Client-App" class="headerlink" title="Web App SignalR Client App"></a>Web App SignalR Client App</h3><p>This is an Asp.net Core Web Application with layout defined using bootstrap library. In the landing page, we will be adding DIV container to show all the incoming messages from SignalR Hub and in the bottom of the page, we will place the text box and button to publish the text message to other clients. We will use the SignalR Javascript Client library to connect to SignalR Hub.</p><h3 id="Steps-1"><a href="#Steps-1" class="headerlink" title="Steps"></a>Steps</h3><ul><li>Launch the Visual Studio and Create a New Project (.Net Core -&gt; Asp.net Core Web Application) . You must have the latest .Net Core SDK (2.1) installed on your machine.</li></ul><p><a href="https://3.bp.blogspot.com/-qwmkb-n8xIc/W0Yn408mw7I/AAAAAAAGumU/xmQsGL0Vibgvu_LmP0YpwMFTqU5UA1mCACLcBGAs/s1600/WebClient_New%2BProject.png" target="_blank" rel="noopener"><img src="https://3.bp.blogspot.com/-qwmkb-n8xIc/W0Yn408mw7I/AAAAAAAGumU/xmQsGL0Vibgvu_LmP0YpwMFTqU5UA1mCACLcBGAs/s640/WebClient_New%2BProject.png" alt></a></p><ul><li>Install the Microsoft.Azure.SignalR Nuget Package for your project.</li></ul><p><a href="https://4.bp.blogspot.com/-r5Zb8sR0SYM/W0Yow2caZXI/AAAAAAAGumk/VU2dgKIU3N8_K47iXS4DXBkWcmEy68yXACLcBGAs/s1600/WebClient_NuGet_Package.png" target="_blank" rel="noopener"><img src="https://4.bp.blogspot.com/-r5Zb8sR0SYM/W0Yow2caZXI/AAAAAAAGumk/VU2dgKIU3N8_K47iXS4DXBkWcmEy68yXACLcBGAs/s640/WebClient_NuGet_Package.png" alt></a></p><ul><li>By default, the Microsoft.AspNetCore.SignalR package containing its server libraries as part of its ASP.NET Core Web Application template. However, the JavaScript client library for SignalR must be installed using npm. Use the following commands from Node Package Manager Console to install it and copy the signalr.js file from node_modules\@aspnet\signalr\dist\browser to wwwroot\lib\signalr\signalr.js. (Create a SignalR Folder under Lib Directory)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm init -y </span><br><span class="line">npm install @aspnet/signalr</span><br></pre></td></tr></table></figure><ul><li><p>We will create a new hub called MagicPasteHub that internally connects to Azure Service. Right click on the Project in Solution Explorer and Create a New Folder called Hub and then add a new file called MagicPasteHub.cs and paste the following code.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MagicPasteHub</span> : <span class="title">Hub</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">async</span> <span class="keyword">void</span> <span class="title">SendData</span>(<span class="params"><span class="keyword">string</span> data</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">await</span> Clients.All.SendAsync(<span class="string">"ReceiveData"</span>, data);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>In the Startup.cs, add the following code in ConfigureServices method. SignalREndPoint Key will hold the Azure Endpoint Value. During Development time, you can store the Azure Endpoint Values in UserSecrets.json. The method AddAzureSignalR will establish the link between Web App and Azure SignalR library using the EndPoint URL.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">services.AddSignalR().AddAzureSignalR(</span><br><span class="line">Configuration[<span class="string">"AppSettings:SignalREndPoint"</span>])</span><br><span class="line">        .AddHubOptions&lt;magicpastehub&gt;(a =&gt; a.EnableDetailedErrors = <span class="literal">true</span>);</span><br></pre></td></tr></table></figure></li><li><p>Add the following code in Configure Method to map the AzureSignalRService with MagicPasteHub Route URL</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">app.UseAzureSignalR(routes =&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                routes.MapHub&lt;magicpastehub&gt;(<span class="string">"/MagicPaste"</span>);</span><br><span class="line">            &#125;);</span><br></pre></td></tr></table></figure></li><li><p>In the site.js, add the following code to setup the signalR client to connect to hub and wire up the button click event to send the message and wire up the ReceiveData event to append the incoming data into DIV container.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> connection = <span class="keyword">new</span> signalR.HubConnectionBuilder()</span><br><span class="line">    .withUrl(<span class="string">"/MagicPaste"</span>)</span><br><span class="line">    .build();</span><br><span class="line"> </span><br><span class="line">connection.start();</span><br><span class="line"> </span><br><span class="line">$(<span class="string">"#btnPublish"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> msg = $(<span class="string">"#inputData"</span>).val();</span><br><span class="line">    <span class="keyword">if</span> (msg.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        connection.invoke(<span class="string">"SendData"</span>, msg).catch(<span class="function"><span class="params">err</span> =&gt;</span> <span class="built_in">console</span>.error(err.toString()));   </span><br><span class="line">        $(<span class="string">"#inputData"</span>).val(<span class="string">''</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line">connection.on(<span class="string">"ReceiveData"</span>, (msg) =&gt; &#123;</span><br><span class="line">    $(<span class="string">"#messagesList"</span>).append($(<span class="string">"</span></span><br><span class="line"><span class="string">&lt;li class="</span>list-group-item list-group-item-info<span class="string">"&gt;"</span>).html(msg));</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line">$(<span class="string">'#inputData'</span>).keypress(<span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (event.keyCode == <span class="number">13</span>) &#123;</span><br><span class="line">        $(<span class="string">'#btnPublish'</span>).click();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><p><img src="https://4.bp.blogspot.com/-vmZe3sv_f-4/W0Yr2seeb-I/AAAAAAAGumw/RLwb7p3e088UHVn8cyagn8BhJ5iRCl5XgCLcBGAs/s1600/WebClient_UI.png" alt></p><p>The entire source of web client app is uploaded here in  <a href="https://github.com/vavjeeva/MagicPaste.WebClient" target="_blank" rel="noopener">github</a>.</p><h3 id="Windows-Forms-App-SignalR-Client"><a href="#Windows-Forms-App-SignalR-Client" class="headerlink" title="Windows Forms App SignalR Client"></a>Windows Forms App SignalR Client</h3><p>This is a full .net framework based windows forms app that will be running in the system tray with the registered global hotkey CTRL + SHIFT + C. Whenever hot key is pressed anywhere in the desktop, app will check and publish the content of the clipboard to other clients. I used NHotKey open source library for registering the hotkey in Windows Forms.</p><p><a href="https://4.bp.blogspot.com/-aWwtMy2YStA/W0Ysn3O1OTI/AAAAAAAGum4/JIbmnbCTf_YwPU97NVyOvRylTG_KvE0UwCLcBGAs/s1600/Winforms_UI.png" target="_blank" rel="noopener"><img src="https://4.bp.blogspot.com/-aWwtMy2YStA/W0Ysn3O1OTI/AAAAAAAGum4/JIbmnbCTf_YwPU97NVyOvRylTG_KvE0UwCLcBGAs/s640/Winforms_UI.png" alt></a></p><h3 id="Steps-2"><a href="#Steps-2" class="headerlink" title="Steps"></a>Steps</h3><ul><li>Launch the Visual Studio and Click on File -&gt; New Project and Select Windows Forms Application under Windows Desktop Section.</li><li>After creating the application, Install the NuGet Package of Microsoft.AspNetCore.SignalR.Client Library for the signalr support..  </li></ul><p><a href="https://2.bp.blogspot.com/-OH0WFknCWDY/W0YucyQ2uUI/AAAAAAAGunE/afa1YRqIuA09rFNrAARYIDWcy2v_iKnXgCLcBGAs/s1600/Winforms_NugetPackage.png" target="_blank" rel="noopener"><img src="https://2.bp.blogspot.com/-OH0WFknCWDY/W0YucyQ2uUI/AAAAAAAGunE/afa1YRqIuA09rFNrAARYIDWcy2v_iKnXgCLcBGAs/s640/Winforms_NugetPackage.png" alt></a>  </p><ul><li>In the MainForm.cs add the following code. The code below will register the global hotkey (CTRL + SHIFT + C) and also initialize the connection with SignalR hub<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">MainForm_Load</span>(<span class="params"><span class="keyword">object</span> sender, EventArgs e</span>)  </span></span><br><span class="line"><span class="function"></span>       &#123;  </span><br><span class="line">           HotkeyManager.Current.AddOrReplace(<span class="string">"OnHotKeyPressed"</span>, Keys.Control | Keys.Shift | Keys.C, <span class="literal">true</span>, OnHotKeyPressed);  </span><br><span class="line">           client.Initialize();  </span><br><span class="line">   </span><br><span class="line">           <span class="keyword">this</span>.WindowState = FormWindowState.Minimized;  </span><br><span class="line">           MinimizeToTray();  </span><br><span class="line">           <span class="keyword">this</span>.ShowInTaskbar = <span class="literal">false</span>;  </span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure></li></ul><p>Add the new File called AzureSignalRClient.cs. This is the wrapper class to to put all the Azure SignalR Client related code.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">AzureSignalRClient</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> MainForm mainForm;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">AzureSignalRClient</span>(<span class="params">MainForm _mainForm</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            mainForm = _mainForm;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">private</span> HubConnection connection;</span><br><span class="line">        TaskScheduler uiTaskScheduler = TaskScheduler.FromCurrentSynchronizationContext();</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">async</span> <span class="keyword">void</span> <span class="title">Initialize</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            connection = <span class="keyword">new</span> HubConnectionBuilder()</span><br><span class="line">                 .WithUrl(<span class="string">"https://magicpaste.azurewebsites.net/MagicPaste"</span>)                 </span><br><span class="line">                 .Build();</span><br><span class="line"> </span><br><span class="line">            connection.On&lt;<span class="keyword">string</span>&gt;(<span class="string">"ReceiveData"</span>, (msg) =&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                mainForm.Invoke((Action)(() =&gt;</span><br><span class="line">                   mainForm.txtIncomingData.Text = msg</span><br><span class="line">                   ));</span><br><span class="line">            &#125;);</span><br><span class="line"> </span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">await</span> connection.StartAsync();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (Exception e)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(e.Message);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">async</span> <span class="keyword">void</span> <span class="title">SendData</span>(<span class="params"><span class="keyword">string</span> msg</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">await</span> connection.InvokeAsync(<span class="string">"SendData"</span>, msg);</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">async</span> <span class="keyword">void</span> <span class="title">Close</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">await</span> connection.StopAsync();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>When the form gets loaded, it initialize the connection to SignalRHub and whenever the hot key is pressed, it will send the data to Azure Hub.</li></ul><h2 id="Xamarin-SignalR-Client-Android-App"><a href="#Xamarin-SignalR-Client-Android-App" class="headerlink" title="Xamarin SignalR Client Android App"></a>Xamarin SignalR Client Android App</h2><p>This is a xamarin based android app which connects to SignalR hub to receive the messages and show as notification to the user and then when the user is clicking the notification, it opens the application with the list of content shared so far in the list view.  </p><p><a href="https://2.bp.blogspot.com/-58A4_lr1Neo/W0YwahUmOUI/AAAAAAAGunQ/CSJ9QcAXZRo4phXm9AWsp28-N43um_6twCLcBGAs/s1600/MagicPaste_Android_UI.png" target="_blank" rel="noopener"><img src="https://2.bp.blogspot.com/-58A4_lr1Neo/W0YwahUmOUI/AAAAAAAGunQ/CSJ9QcAXZRo4phXm9AWsp28-N43um_6twCLcBGAs/s640/MagicPaste_Android_UI.png" alt></a></p><h3 id="Steps-3"><a href="#Steps-3" class="headerlink" title="Steps"></a>Steps</h3><ul><li><p>Launch the visual studio and select the Android -&gt; Android App (Xamarin) from the Menu.<br><a href="https://2.bp.blogspot.com/-hfQaNjReCZc/W0YwqhDsfiI/AAAAAAAGunU/jDliBA19wsw7wy8P90tJmqel2K0A1CehgCLcBGAs/s1600/1.%2BNew%2BProject.png" target="_blank" rel="noopener"><img src="https://2.bp.blogspot.com/-hfQaNjReCZc/W0YwqhDsfiI/AAAAAAAGunU/jDliBA19wsw7wy8P90tJmqel2K0A1CehgCLcBGAs/s640/1.%2BNew%2BProject.png" alt></a>  </p></li><li><p>From the Solution Explorer, Select Manage NuGet Packages and Select Microsoft.AspNetCore.SignalR.Client Library and Install it.<br><a href="https://2.bp.blogspot.com/-XS8cQLG_b0I/W0Yw1DrMQcI/AAAAAAAGunc/Yl8BYBk87EYgEaGDR0yRZi3eAD8hesCSgCLcBGAs/s1600/2.%2BSignalR%2BNuget%2BPackage.png" target="_blank" rel="noopener"><img src="https://2.bp.blogspot.com/-XS8cQLG_b0I/W0Yw1DrMQcI/AAAAAAAGunc/Yl8BYBk87EYgEaGDR0yRZi3eAD8hesCSgCLcBGAs/s640/2.%2BSignalR%2BNuget%2BPackage.png" alt></a></p></li></ul><ul><li>In MainActivity.cs, Initialize the SignalR Connection as part of OnCreate Method and wire up the SignalR Receive Data event to send the Notification with the received message. I used SharedPreferences to store all the incoming data as Json and display it in the List Activity.<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line">public class MainActivity : ListActivity</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">protected</span> override <span class="keyword">void</span> <span class="title">OnCreate</span><span class="params">(Bundle savedInstanceState)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            base.OnCreate(savedInstanceState);</span><br><span class="line">          </span><br><span class="line">            ListAdapter = <span class="keyword">new</span> ArrayAdapter&lt;string&gt;(<span class="keyword">this</span>, Android.Resource.Layout.SimpleListItem1, GetItemsFromPreferences());</span><br><span class="line"> </span><br><span class="line">            InitializeSignalRClient();</span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">        <span class="function"><span class="keyword">private</span> async <span class="keyword">void</span> <span class="title">InitializeSignalRClient</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        </span>&#123;            </span><br><span class="line">            <span class="keyword">var</span> connection = <span class="keyword">new</span> HubConnectionBuilder()</span><br><span class="line">                .WithUrl(<span class="string">"https://magicpaste.azurewebsites.net/MagicPaste"</span>)                </span><br><span class="line">                .Build();</span><br><span class="line"> </span><br><span class="line">            connection.On&lt;string&gt;(<span class="string">"ReceiveData"</span>, (msg) =&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                SaveData(msg);</span><br><span class="line">                ShowNotification(msg);</span><br><span class="line">            &#125;);</span><br><span class="line"> </span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                await connection.StartAsync();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (Exception e)</span><br><span class="line">            &#123;</span><br><span class="line">                Log.Error(<span class="string">"MagicPaste"</span>, e.Message);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="function"><span class="keyword">private</span> List&lt;string&gt; <span class="title">GetItemsFromPreferences</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="comment">// get shared preferences</span></span><br><span class="line">            ISharedPreferences pref = Application.Context.GetSharedPreferences(<span class="string">"MagicPaste"</span>, FileCreationMode.Private);</span><br><span class="line"> </span><br><span class="line">            <span class="comment">// read exisiting value</span></span><br><span class="line">            <span class="keyword">var</span> itemsFromSP = pref.GetString(<span class="string">"Items"</span>, <span class="keyword">null</span>);</span><br><span class="line"> </span><br><span class="line">            <span class="comment">// if preferences return null, initialize listOfCustomers</span></span><br><span class="line">            <span class="keyword">if</span> (itemsFromSP == <span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> List&lt;string&gt;();</span><br><span class="line">             </span><br><span class="line">            <span class="keyword">var</span> items = JsonConvert.DeserializeObject&lt;List&lt;string&gt;&gt;(itemsFromSP);</span><br><span class="line"> </span><br><span class="line">            <span class="keyword">if</span> (items == <span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> List&lt;string&gt;();</span><br><span class="line"> </span><br><span class="line">            <span class="keyword">return</span> items;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">SaveData</span><span class="params">(string msg)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="comment">// get shared preferences</span></span><br><span class="line">            ISharedPreferences pref = Application.Context.GetSharedPreferences(<span class="string">"MagicPaste"</span>, FileCreationMode.Private);</span><br><span class="line"> </span><br><span class="line">            <span class="comment">// read exisiting value</span></span><br><span class="line">            <span class="keyword">var</span> itemsFromSP = pref.GetString(<span class="string">"Items"</span>, <span class="keyword">null</span>);</span><br><span class="line">            IList&lt;string&gt; items;</span><br><span class="line">            <span class="comment">// if preferences return null, initialize listOfCustomers</span></span><br><span class="line">            <span class="keyword">if</span> (itemsFromSP == <span class="keyword">null</span>)</span><br><span class="line">                items = <span class="keyword">new</span> List&lt;string&gt;();</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                items = JsonConvert.DeserializeObject&lt;List&lt;string&gt;&gt;(itemsFromSP);</span><br><span class="line"> </span><br><span class="line">            <span class="comment">// add your object to list of customers</span></span><br><span class="line">            items.Add(msg);</span><br><span class="line"> </span><br><span class="line">            <span class="comment">// convert the list to json</span></span><br><span class="line">            <span class="keyword">var</span> itemsAsJson = JsonConvert.SerializeObject(items);</span><br><span class="line"> </span><br><span class="line">            ISharedPreferencesEditor editor = pref.Edit();</span><br><span class="line"> </span><br><span class="line">            <span class="comment">// set the value to Customers key</span></span><br><span class="line">            editor.PutString(<span class="string">"Items"</span>, itemsAsJson);</span><br><span class="line"> </span><br><span class="line">            <span class="comment">// commit the changes</span></span><br><span class="line">            editor.Commit();            </span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ShowNotification</span><span class="params">(string msg)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            Intent intent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, typeof(MainActivity));</span><br><span class="line"> </span><br><span class="line">            <span class="comment">// Create a PendingIntent; we're only using one PendingIntent (ID = 0):</span></span><br><span class="line">            <span class="keyword">const</span> <span class="keyword">int</span> pendingIntentId = <span class="number">0</span>;</span><br><span class="line">            PendingIntent pendingIntent =</span><br><span class="line">                PendingIntent.GetActivity(<span class="keyword">this</span>, pendingIntentId, intent, PendingIntentFlags.CancelCurrent);</span><br><span class="line"> </span><br><span class="line">            Notification.Builder builder = <span class="keyword">new</span> Notification.Builder(<span class="keyword">this</span>)</span><br><span class="line">                                .SetContentIntent(pendingIntent)</span><br><span class="line">                                .SetContentTitle(<span class="string">"MagicPaste"</span>)</span><br><span class="line">                                .SetContentText(msg)</span><br><span class="line">                                .SetAutoCancel(<span class="keyword">true</span>)</span><br><span class="line">                                .SetSmallIcon(Resource.Drawable.notification_tile_bg);                                </span><br><span class="line"> </span><br><span class="line">            <span class="comment">// Build the notification:</span></span><br><span class="line">            Notification notification = builder.Build();</span><br><span class="line"> </span><br><span class="line">            <span class="comment">// Get the notification manager:</span></span><br><span class="line">            NotificationManager notificationManager = GetSystemService(NotificationService) as NotificationManager;            </span><br><span class="line">            <span class="comment">// Publish the notification:</span></span><br><span class="line">            <span class="keyword">const</span> <span class="keyword">int</span> notificationId = <span class="number">0</span>;</span><br><span class="line">            notificationManager.Notify(notificationId, notification);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>SignalR services are mainly used for Apps with Real-Time technologies with high-frequency data flows and large quantities of concurrent connections between the client and server. Now with Azure SignalR Service, it allows you to use ASP.NET Core SignalR to build real-time experiences such as chat, live dashboards, colloboration editor and more, all without worrying about capacity provisioning, scaling, or persistent connections. This article explains the basic idea of how to use Azure SignalR Service However, for the real world implementation, we need to look at the fact of application performance and battery optimization for mobile apps before implementing SignalR services.  </p><p>I have uploaded the entire source code of  <a href="https://github.com/vavjeeva/MagicPaste.WebClient" target="_blank" rel="noopener">Web</a>,  <a href="https://github.com/vavjeeva/MagicPaste.AndroidClient" target="_blank" rel="noopener">Android</a> and  <a href="https://github.com/vavjeeva/MagicPaste.WindowsClient" target="_blank" rel="noopener">WinForms</a> in my github repository.  </p><p>Happy Coding.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;In this article, i will discuss about how to do real time communication between cross platform devices such as .net core web app runs in Azure, xamarin based android app and Full .Net Framework based Windows Forms app running in Windows Operating System by sending and receiving data using Azure SignalR Service. In this two part of article series, i will create a tool called MagicPaste which will transfer the text content from one device to another in real time.  &lt;/p&gt;
&lt;p&gt;This article provides an overview of architecture of Magic Paste tool and how to setup the SignalR Service in Azure SignalR Portal. It also provides the overview of how to develop SignalR Client Web , Android and Windows Forms App to communicate each other in real time using Azure SignalR Service.  &lt;/p&gt;
    
    </summary>
    
    
      <category term=".Net Core" scheme="https://jeevasubburaj.com/tags/Net-Core/"/>
    
      <category term="Android" scheme="https://jeevasubburaj.com/tags/Android/"/>
    
      <category term="Azure" scheme="https://jeevasubburaj.com/tags/Azure/"/>
    
      <category term="SignalR" scheme="https://jeevasubburaj.com/tags/SignalR/"/>
    
      <category term="Xamarin" scheme="https://jeevasubburaj.com/tags/Xamarin/"/>
    
  </entry>
  
  <entry>
    <title>Real time Language Translation chat using SignalR and Azure Cognitive Services and TypedHttpClient - .Net Core 2.1</title>
    <link href="https://jeevasubburaj.com/2018/06/06/real-time-language-translation-chat/"/>
    <id>https://jeevasubburaj.com/2018/06/06/real-time-language-translation-chat/</id>
    <published>2018-06-06T19:38:00.003Z</published>
    <updated>2019-03-15T17:33:29.163Z</updated>
    
    <content type="html"><![CDATA[<p>In this article, I will discuss about how to do real-time translation chat using any language of choice in two way communication using SignalR and Cognitive Services Translate API and one of the new feature .Net Core 2.1 <strong>HttpClientFactory – TypedHttpClient</strong> to make API calls.  </p><p>This is a simple chat application for user to login with name and choice of language to send and receive the message. When the user sends the message, signalR hub receives the message and send the API request to Azure Cognitive Translate API Library and receives the translated text and send it back to user in real time. SignalR Hub creates the group of users based on language so that when the translated text comes back from API, it broadcast back to the group based on the language.  </p><a id="more"></a><p>[<img src="https://1.bp.blogspot.com/-JSQ-7JklFio/WxqbyJV6W1I/AAAAAAAGszw/HUt2nhTo88AxpvQKw2fzWTXpoRUCK40AgCLcBGAs/s1600/Chat_Window.png" alt>](<a href="https://1.bp.blogspot.com/-JSQ-7JklFio/WxqbyJV6W1I/AAAAAAAGszw/HUt2nhTo88AxpvQKw2fzWTXpoRUCK40AgCLcBGAs/s1600/Chat_Window.png" target="_blank" rel="noopener">https://1.bp.blogspot.com/-JSQ-7JklFio/WxqbyJV6W1I/AAAAAAAGszw/HUt2nhTo88AxpvQKw2fzWTXpoRUCK40AgCLcBGAs/s1600/Chat_Window.png</a></p><p><strong>Video Demo</strong><br><div class="video-container"><iframe src="//www.youtube.com/embed/d2NXV3FRunU" frameborder="0" allowfullscreen></iframe></div></p><h2 id="Architecture-amp-How-it-Works"><a href="#Architecture-amp-How-it-Works" class="headerlink" title="Architecture &amp; How it Works?"></a>Architecture &amp; How it Works?</h2><p><img src="https://2.bp.blogspot.com/-AZUqwiZWZ-c/WxqYb9xTMJI/AAAAAAAGszk/_OZugp5NRl868pJssvpuOINUsbk9yVRIQCLcBGAs/s1600/SignalR_Chat_Architecture.png" alt></p><p>Realtime Chat application is developed in .Net Core Web App using Razor Pages with Bootstrap layout and .Net Core SignalR Library .  </p><p>When the user login with the name and choice of language they selected, system is establishing the connection with SignalRHub and put the user into the selected language group. It also notifies all the other users that new user is joined.  </p><p>When the user sends the message, SignalRHub makes the Web API call with Cognitive Services API to get the translated message and sending the translated message to other members in their selected languages real-time.  </p><p>When the user exits the chat, it removes from the group and also notifies the other users.  </p><p><strong>Steps</strong>-   Create a New Razor Web App with Login and Chat Pages and Adding SignalR Libraries</p><ul><li>Create a SignalR Hub and Register with Web App</li><li>Create and Consume Cognitive Services in Azure (Free Tier)</li></ul><h2 id="Prerequisites"><a href="#Prerequisites" class="headerlink" title="Prerequisites"></a>Prerequisites</h2><ul><li>Visual Studio 2017 v 15.7.3 or above</li><li>.Net Core SDK 2.1</li></ul><h2 id="Creating-a-New-Razor-Web-App-amp-Adding-SignalR-Libraries"><a href="#Creating-a-New-Razor-Web-App-amp-Adding-SignalR-Libraries" class="headerlink" title="Creating a New Razor Web App &amp; Adding SignalR Libraries"></a>Creating a New Razor Web App &amp; Adding SignalR Libraries</h2><ul><li>Launch the Visual Studio and use the  <strong>File</strong>  &gt;  <strong>New Project</strong>  menu option and choose  <strong>ASP.NET Core Web Application</strong>. Name the project  <em>RealTimeTranslationChat</em>.<br><a href="https://lh3.googleusercontent.com/-EKveFq5VAEo/WxgFzPthxkI/AAAAAAAGsv8/rH07BUMx7tAviWyvSszzY5rHxtnBrpStgCHMYCw/s1600-h/New_Project%255B7%255D" target="_blank" rel="noopener"><img src="https://lh3.googleusercontent.com/-rJkV6udhFUM/WxgF2VlY0UI/AAAAAAAGswA/XfX9FDS_zV4L5oRK0VCp9WDFxBRKblzlQCHMYCw/New_Project_thumb%255B5%255D?imgmax=800" alt="New_Project" title="New_Project"></a>-   Select the Web Application and make sure Asp.Net Core 2.1 is selected.<br><a href="https://lh3.googleusercontent.com/-xqdkpEApC3c/WxgF47-cj1I/AAAAAAAGswE/fdOfNxgDzQca_gzRwQSafVuzZO-GeQR3gCHMYCw/s1600-h/New_Project_Web_App%255B6%255D" target="_blank" rel="noopener"><img src="https://lh3.googleusercontent.com/-T4zt0S1ZAfo/WxgF6wgCtYI/AAAAAAAGswI/60tfKd9tQcwr7mNmUYQ3wL1imNg02DQIQCHMYCw/New_Project_Web_App_thumb%255B4%255D?imgmax=800" alt="New_Project_Web_App" title="New_Project_Web_App"></a>-   </li></ul><p>By default, the  <strong>Microsoft.AspNetCore.SignalR</strong>  package containing its server libraries as part of its ASP.NET Core Web Application template. However, the JavaScript client library for SignalR must be installed using npm. Use the following commands from Node Package Manager Console to install it and copy the signalr.js file from  <strong>node_modules\@aspnet\signalr\dist\browser</strong>  to  <strong>wwwroot\lib\signalr\signalr.js</strong>. (Create a SignalR Folder under Lib Directory)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm init -y </span><br><span class="line">npm install @aspnet/signalr</span><br></pre></td></tr></table></figure><h2 id="Create-the-SignalRHub-and-Register-with-Web-App"><a href="#Create-the-SignalRHub-and-Register-with-Web-App" class="headerlink" title="Create the SignalRHub and Register with Web App"></a>Create the SignalRHub and Register with Web App</h2><ul><li>Create a New folder called Models and add a User model class.<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">User</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        public string Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        public string LanguagePreference &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        public string ConnectionId &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul><p>This model class holds the Name and the Language preference selected by user and the SignalR Connection ID.</p><ul><li>Create a New Folder called Hubs and add a new class called ChatHub.cs<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ChatHub</span> : <span class="title">Hub</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> CognitiveServiceClient _client;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">ChatHub</span>(<span class="params">CognitiveServiceClient client</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            _client = client;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">static</span> List&lt;user&gt; ConnectedUsers = <span class="keyword">new</span> List&lt;user&gt;();</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">public</span> User CurrentUser</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> ConnectedUsers.FirstOrDefault(i =&gt; i.ConnectionId == Context.ConnectionId);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">string</span> LanguageFormatted</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">string</span> result = <span class="string">""</span>;</span><br><span class="line">                <span class="keyword">var</span> items = ConnectedUsers.Select(i =&gt; i.LanguagePreference).Distinct();</span><br><span class="line">                <span class="keyword">foreach</span> (<span class="keyword">var</span> language <span class="keyword">in</span> items)</span><br><span class="line">                &#123;</span><br><span class="line">                    result += <span class="string">$"to=<span class="subst">&#123;language&#125;</span>&amp;"</span>;</span><br><span class="line">                &#125;</span><br><span class="line"> </span><br><span class="line">                <span class="keyword">if</span> (result.Length &gt; <span class="number">1</span>)</span><br><span class="line">                    result = result.Substring(<span class="number">0</span>, result.Length - <span class="number">1</span>);</span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task <span class="title">SendMessage</span>(<span class="params"><span class="keyword">string</span> user, <span class="keyword">string</span> message</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">var</span> results = _client.Translate(message, LanguageFormatted);</span><br><span class="line">            <span class="keyword">var</span> translationResult = results.Result.FirstOrDefault();</span><br><span class="line">            <span class="keyword">if</span> (translationResult != <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">foreach</span> (<span class="keyword">var</span> translation <span class="keyword">in</span> translationResult.translations)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">await</span> Clients.GroupExcept(translation.to, Context.ConnectionId).SendAsync(<span class="string">"ReceiveMessage"</span>, user, translation.text);</span><br><span class="line">                    <span class="comment">//await Clients.AllExcept(Context.ConnectionId).SendAsync("ReceiveMessage", user, message);</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task <span class="title">Connect</span>(<span class="params"><span class="keyword">string</span> name, <span class="keyword">string</span> language</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">var</span> id = Context.ConnectionId;</span><br><span class="line">            <span class="keyword">if</span> (ConnectedUsers.Count(x =&gt; x.ConnectionId == id) == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                ConnectedUsers.Add(<span class="keyword">new</span> User() &#123; Name = name, ConnectionId = id, LanguagePreference = language &#125;);</span><br><span class="line"> </span><br><span class="line">                <span class="keyword">await</span> Groups.AddToGroupAsync(id, language);</span><br><span class="line">                <span class="keyword">await</span> Clients.Caller.SendAsync(<span class="string">"onConnected"</span>, ConnectedUsers, name, id);</span><br><span class="line">                <span class="keyword">await</span> Clients.AllExcept(id).SendAsync(<span class="string">"onNewUserConnected"</span>, name);</span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task <span class="title">Disconnect</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">var</span> item = ConnectedUsers.FirstOrDefault(x =&gt; x.ConnectionId == Context.ConnectionId);</span><br><span class="line">            <span class="keyword">if</span> (item != <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                ConnectedUsers.Remove(item);</span><br><span class="line">                <span class="keyword">await</span> Clients.AllExcept(item.ConnectionId).SendAsync(<span class="string">"onDisconnected"</span>, item.Name);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul><p>This is the main signalr hub that will communicate with all the clients and also make the API calls to Translation Library to translate the text. The constructor based dependency injection loads the TypedHttpClient object that are configured in Startup.cs to make the http API calls.<br><strong>Connect</strong> Method will be called when ever the new user is connected and its adds the users into the static list (Preferably to store in concurrent dictionary to avoid multi thread locking issues) and also add to the signalr group based the launguage the user is selected. It also sends the message back to caller with the list of users so that it will be populating user panel on the UI side. It also sends the notification to all the other users that new user is joined the chat.<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">await</span> Groups.AddToGroupAsync(id, language);</span><br><span class="line"><span class="keyword">await</span> Clients.Caller.SendAsync(<span class="string">"onConnected"</span>, ConnectedUsers, name, id);</span><br><span class="line"><span class="keyword">await</span> Clients.AllExcept(id).SendAsync(<span class="string">"onNewUserConnected"</span>, name);</span><br></pre></td></tr></table></figure></p><p><strong>Disconnect</strong> Method gets called when the user exits the chats. It removes the user from the list and also notifies all the other users.<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ConnectedUsers.Remove(item);</span><br><span class="line"><span class="keyword">await</span> Clients.AllExcept(item.ConnectionId).SendAsync(<span class="string">"onDisconnected"</span>, item.Name);</span><br></pre></td></tr></table></figure></p><p><strong>SendMessage</strong> Method will be called whenever user enters the message and it makes the API calls to translation service to get the translated text in each languages and sends the associated translated text to each group.</p><h2 id="Create-and-Consume-Cognitive-Services-in-Azure-Free-Tier"><a href="#Create-and-Consume-Cognitive-Services-in-Azure-Free-Tier" class="headerlink" title="Create and Consume Cognitive Services in Azure (Free Tier)"></a>Create and Consume Cognitive Services in Azure (Free Tier)</h2><ul><li>Login to Azure Portal and Search for cognitive service and select Cognitive Services.</li></ul><p><a href="https://lh3.googleusercontent.com/-jX_2RiwlPlU/WxgwSSL2VfI/AAAAAAAGsw0/GIUH_wRrJhsh0MX47lwO16LobIrD-h-kgCHMYCw/s1600-h/1%255B3%255D" target="_blank" rel="noopener"><img src="https://lh3.googleusercontent.com/-gQi-ABxwYjA/WxgwUxxY2CI/AAAAAAAGsw4/IEJVtVz3D5QIoNdRSa_X3dTUNzIMMvmZACHMYCw/1_thumb%255B1%255D?imgmax=800" alt="1" title="1"></a></p><ul><li>Click Add Button and Search for Translator Text and Select it and click the Create Button.</li></ul><p><a href="https://lh3.googleusercontent.com/-IxgvkIAhdRU/WxgwXW6ZTcI/AAAAAAAGsw8/WT8vYhdksYccMRwSEap_sOzM3fdiQ5VlQCHMYCw/s1600-h/1.1%255B4%255D" target="_blank" rel="noopener"><img src="https://lh3.googleusercontent.com/-hdnP1JOxd4A/WxgwaPgOcQI/AAAAAAAGsxA/Xj4FqbgtN5M4Fx7GSHXpeRGsc-TIZiYhACHMYCw/1.1_thumb%255B2%255D?imgmax=800" alt="1.1" title="1.1"></a></p><ul><li><p>You can select the Free Tier for Development purpose. It allows upto 2Million characters to translate per month in Free Tier.<br><a href="https://lh3.googleusercontent.com/-wecbJE83KNw/Wxgwb7h4SqI/AAAAAAAGsxE/HkxwCkfRvygXynAvh5AaRg37zdnfwRx5ACHMYCw/s1600-h/Pricing_Tier%255B3%255D" target="_blank" rel="noopener"><img src="https://lh3.googleusercontent.com/-8ShphCc0EFM/WxgwenjT0bI/AAAAAAAGsxI/o7GdGBI3vjwbLiNPwAKPtD5Jdk_608pDACHMYCw/Pricing_Tier_thumb%255B1%255D?imgmax=800" alt="Pricing_Tier" title="Pricing_Tier"></a></p></li><li><p>After the Cognitive Service is created, you can obtain the Subscription Keys from the Quick Start Menu.</p></li></ul><p><a href="https://lh3.googleusercontent.com/-ATamoUPdfk4/WxgwglaD8mI/AAAAAAAGsxM/77IWq7K4B7Iciau9ShpxkuQ5Dz0P8qygQCHMYCw/s1600-h/2%255B4%255D" target="_blank" rel="noopener"><img src="https://lh3.googleusercontent.com/-SBFmGqHxSvw/WxgwikiJUBI/AAAAAAAGsxU/5Q8qC3vA7Kg6Nuoor0m17fdWJIy56uJ_ACHMYCw/2_thumb%255B2%255D?imgmax=800" alt="2" title="2"></a></p><ul><li>By default , two keys will be provided. you can copy the key1 value and put it in usersecrets.json for the application to access it.</li></ul><p><a href="https://lh3.googleusercontent.com/-YuyNmpYetuw/WxgwlN7cdAI/AAAAAAAGsxY/phwjn9Dnsq0NDMNoUfulqXpYz49FzGn_QCHMYCw/s1600-h/3%255B7%255D" target="_blank" rel="noopener"><img src="https://lh3.googleusercontent.com/-koHx0nz4gUs/WxgwnYekzoI/AAAAAAAGsxc/eRIhChSgBm8nMOXaxjUHa-PwQy6csOt3wCHMYCw/3_thumb%255B3%255D?imgmax=800" alt="3" title="3"></a><br>Now that, we have completed setting up the Translator Service in Azure, we will switch back to code to consume the API Service. We will be using TypedHttpClient to consume the web service. Typed clients are custom classes with HttpClient injected in the constructor. This will be wired up within the DI system by adding generic AddHttpClient method in Startup.cs with the custom type. Another advantage of having typed client is that we can encapsulate the all the HTTP calls inside specific business methods like SendMessage, GetSupportedLanguages.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CognitiveServiceClient</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> HttpClient _client;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">readonly</span> <span class="keyword">string</span> _apiKey;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">readonly</span> <span class="keyword">string</span> _apiVersion;</span><br><span class="line">        <span class="keyword">private</span> ILogger&lt;cognitiveserviceclient&gt; _logger;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">CognitiveServiceClient</span>(<span class="params">HttpClient client, ILogger&lt;cognitiveserviceclient&gt; logger, IConfiguration config</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            _client = client;</span><br><span class="line">            _client.BaseAddress = <span class="keyword">new</span> Uri(config[<span class="string">"AppSettings:APIBaseURL"</span>]);</span><br><span class="line">            _apiVersion = config[<span class="string">"AppSettings:APIVersion"</span>];</span><br><span class="line">            _apiKey = config[<span class="string">"AppSettings:SubscriptionKey"</span>];</span><br><span class="line">            _logger = logger;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">async</span> Task&lt;List Language&gt; GetSupportedLanguages()</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> languages = <span class="keyword">new</span> List&lt;Language&gt;();</span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">var</span> languagesUrl = <span class="keyword">new</span> Uri(<span class="string">$"/languages?api-version=<span class="subst">&#123;_apiVersion&#125;</span>"</span>, UriKind.Relative);</span><br><span class="line">                <span class="keyword">var</span> res = <span class="keyword">await</span> _client.GetAsync(languagesUrl);</span><br><span class="line">                res.EnsureSuccessStatusCode();</span><br><span class="line">                <span class="keyword">var</span> jsonResults = <span class="keyword">await</span> res.Content.ReadAsStringAsync();</span><br><span class="line"> </span><br><span class="line">                <span class="keyword">dynamic</span> entity = JObject.Parse(jsonResults);</span><br><span class="line">                <span class="keyword">foreach</span> (JProperty property <span class="keyword">in</span> entity.translation.Properties())</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">dynamic</span> langDetail = JObject.Parse(property.Value.ToString());</span><br><span class="line">                    <span class="keyword">var</span> language = <span class="keyword">new</span> Language();</span><br><span class="line">                    language.Code = property.Name;</span><br><span class="line">                    language.Name = langDetail.name;</span><br><span class="line">                    languages.Add(language);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> languages;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (HttpRequestException ex)</span><br><span class="line">            &#123;</span><br><span class="line">                _logger.LogError(<span class="string">$"An error occurred connecting to CognitiveService API <span class="subst">&#123;ex.ToString()&#125;</span>"</span>);</span><br><span class="line">                <span class="keyword">throw</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">async</span> Task&lt;List TranslationResult&gt; Translate(<span class="keyword">string</span> message, <span class="keyword">string</span> languages)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                System.Object[] body = <span class="keyword">new</span> System.Object[] &#123; <span class="keyword">new</span> &#123; Text = message &#125; &#125;;</span><br><span class="line">                <span class="keyword">var</span> requestBody = JsonConvert.SerializeObject(body);</span><br><span class="line"> </span><br><span class="line">                <span class="keyword">var</span> translateUrl = <span class="keyword">new</span> Uri(<span class="string">$"/translate?api-version=<span class="subst">&#123;_apiVersion&#125;</span>&amp;<span class="subst">&#123;languages&#125;</span>"</span>, UriKind.Relative);</span><br><span class="line">                 </span><br><span class="line">                <span class="keyword">string</span> jsonResults = <span class="literal">null</span>;</span><br><span class="line">                <span class="keyword">using</span> (<span class="keyword">var</span> request = <span class="keyword">new</span> HttpRequestMessage())</span><br><span class="line">                &#123;</span><br><span class="line">                    request.Method = HttpMethod.Post;</span><br><span class="line">                    request.RequestUri = translateUrl;</span><br><span class="line">                    request.Content = <span class="keyword">new</span> StringContent(requestBody, Encoding.UTF8, <span class="string">"application/json"</span>);</span><br><span class="line">                    request.Headers.Add(<span class="string">"Ocp-Apim-Subscription-Key"</span>, _apiKey);</span><br><span class="line"> </span><br><span class="line">                    <span class="keyword">var</span> res = <span class="keyword">await</span> _client.SendAsync(request);                   </span><br><span class="line">                    jsonResults = <span class="keyword">await</span> res.Content.ReadAsStringAsync();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> JsonConvert.DeserializeObject&lt;list TranslationResult&gt;(jsonResults);</span><br><span class="line">                     </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (HttpRequestException ex)</span><br><span class="line">            &#123;</span><br><span class="line">                _logger.LogError(<span class="string">$"An error occurred connecting to CognitiveService API <span class="subst">&#123;ex.ToString()&#125;</span>"</span>);</span><br><span class="line">                <span class="keyword">throw</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p> <strong>GetSupportedLanguages</strong> method will make the API calls to get the list of supported languages.<br><strong>Translate</strong> method takes the message and list of languages to translate and return the json output translation text array all the requested languages.</p><h2 id="Additional-Points"><a href="#Additional-Points" class="headerlink" title="Additional Points"></a>Additional Points</h2><ul><li><p>In Startup.cs, make sure to add the below code in ConfigureServices method.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">services.AddSignalR();</span><br><span class="line">services.AddHttpClient&lt;cognitiveserviceclient&gt;();</span><br></pre></td></tr></table></figure></li><li><p>In the Configure method, add the following,</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">app.UseSignalR(routes =&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                routes.MapHub&lt;chathub&gt;(<span class="string">"/chathub"</span>);</span><br><span class="line">            &#125;);</span><br></pre></td></tr></table></figure><p>In the IndexModel.cs , we will have the implementation for GET method to return the list of supported languages.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> CognitiveServiceClient _client;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="title">IndexModel</span>(<span class="params">CognitiveServiceClient Client</span>)</span></span><br><span class="line"><span class="function"></span>      &#123;</span><br><span class="line">          _client = Client;</span><br><span class="line">      &#125;</span><br><span class="line"> </span><br><span class="line">      [<span class="meta">BindProperty</span>]</span><br><span class="line">      <span class="keyword">public</span> User user &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"> </span><br><span class="line">      <span class="keyword">public</span> SelectList LanguageSL &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"> </span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task <span class="title">OnGetAsync</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>      &#123;</span><br><span class="line">          <span class="keyword">await</span> GetLanguages();</span><br><span class="line">      &#125;</span><br><span class="line"> </span><br><span class="line">      <span class="function"><span class="keyword">private</span> <span class="keyword">async</span> Task <span class="title">GetLanguages</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>      &#123;</span><br><span class="line">          LanguageSL = <span class="keyword">new</span> SelectList(<span class="keyword">await</span> _client.GetSupportedLanguages(),<span class="keyword">nameof</span>(Language.Code),<span class="keyword">nameof</span>(Language.Name));</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>Finally, this can be tested by running the application in multiple window with different username and languages are selected so that both window can send and receives the message in their selected language in realtime. The same application can be hosted in Azure as a web app with our local signalR hub or use the <a href="https://azure.microsoft.com/en-us/services/signalr-service/" target="_blank" rel="noopener">Azure SignalR service</a>.  </p><p>In future, it is very much possible to see this realtime translation feature in every apps including the most popular messaging apps like whatsapp when the group chat is having people who speak different region languages and enabling automatic translation settings would help a lot.  </p><p>I have posted entire source code in my <a href="https://github.com/vavjeeva/RealTimeTranslationChat/" target="_blank" rel="noopener">github</a> library.<br>Happy Coding!!!</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;In this article, I will discuss about how to do real-time translation chat using any language of choice in two way communication using SignalR and Cognitive Services Translate API and one of the new feature .Net Core 2.1 &lt;strong&gt;HttpClientFactory – TypedHttpClient&lt;/strong&gt; to make API calls.  &lt;/p&gt;
&lt;p&gt;This is a simple chat application for user to login with name and choice of language to send and receive the message. When the user sends the message, signalR hub receives the message and send the API request to Azure Cognitive Translate API Library and receives the translated text and send it back to user in real time. SignalR Hub creates the group of users based on language so that when the translated text comes back from API, it broadcast back to the group based on the language.  &lt;/p&gt;
    
    </summary>
    
    
      <category term="C#" scheme="https://jeevasubburaj.com/tags/C/"/>
    
      <category term=".Net Core" scheme="https://jeevasubburaj.com/tags/Net-Core/"/>
    
      <category term="Azure" scheme="https://jeevasubburaj.com/tags/Azure/"/>
    
      <category term="SignalR" scheme="https://jeevasubburaj.com/tags/SignalR/"/>
    
      <category term="HttpClient" scheme="https://jeevasubburaj.com/tags/HttpClient/"/>
    
      <category term="CognitiveService" scheme="https://jeevasubburaj.com/tags/CognitiveService/"/>
    
  </entry>
  
  <entry>
    <title>Parser API using .Net Core Web API 2.1 and Hosting in Raspberry PI</title>
    <link href="https://jeevasubburaj.com/2018/05/21/parser-api-using-net-core-web-api-21/"/>
    <id>https://jeevasubburaj.com/2018/05/21/parser-api-using-net-core-web-api-21/</id>
    <published>2018-05-21T17:12:00.001Z</published>
    <updated>2019-03-15T17:33:08.680Z</updated>
    
    <content type="html"><![CDATA[<p>This article explains how to create generic parser API to parse video feeds from various sites that supports RSS/Atom feed or scraping the content from DOM element and return the custom XML / JSON output based on requested streaming box supported format. The core parsing logic will be implemented in base class and then custom formatting logic will be implemented in the appropriate child classes. Later in the article, we will also deploy this application into Raspian based Raspberry PI. We are using the latest .Net Core SDk 2.1 RC release for developing the web API. In my earlier <a href="http://www.jeevasubburaj.com/2018/03/how-to-build-personal-web-server-using.html" target="_blank" rel="noopener">article</a> , i developed the similar application using NodeJS and Express and deployed in Raspberry PI.  </p><a id="more"></a><h2 id="Design"><a href="#Design" class="headerlink" title="Design"></a>Design</h2><p>The below diagram depicts the architecture of Model and Service Components. In this article, i have added only for feed based service and i will be adding to support DOM based extraction later and publish it into <a href="https://github.com/vavjeeva/VideoParserAPI/" target="_blank" rel="noopener">github</a>.  </p><h2 id="Model-Class-Diagram"><a href="#Model-Class-Diagram" class="headerlink" title="Model Class Diagram"></a>Model Class Diagram</h2><p><img src="https://lh3.googleusercontent.com/-A3KaM_0VZlY/WwDlqIPMEbI/AAAAAAAGr4U/q5HHRNobez86h_elK-tS_EHd0f4TWhF8ACHMYCw/image_thumb%255B3%255D?imgmax=800" alt="image"></p><p><strong>IParserModel</strong> - Interface for the model.<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IParserModel</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">string</span> RawContent &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;       </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>BaseParserModel</strong> – Base class for the Parser Mode. RawContent will holds the Raw content of feed or DOM.<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">FeedBaseParserModel</span> : <span class="title">BaseParserModel</span></span><br><span class="line">    &#123;</span><br><span class="line">        [<span class="meta">XmlIgnore</span>]</span><br><span class="line">        <span class="keyword">public</span> List&lt;isyndicationitem&gt; SyndicationItems &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p> <strong>RokuParserModel</strong> – This is the root class for Roku which holds all the properties and subclasses that are expected for Roku Streaming Box. I will be adding  <strong>AndroidParserModel</strong> and <strong>IOSParserModel</strong> in future to support other streaming boxes. The RokuParserModel also have sub classes to hold other properties such video URL and ThumbnailURL. This can be customized in whatever way our streaming box expects the model to be.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">XmlRoot(ElementName =<span class="meta-string">"Feed"</span>)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">RokuFeedParserModel</span> : <span class="title">FeedBaseParserModel</span></span><br><span class="line">    &#123;        </span><br><span class="line">        [<span class="meta">XmlElement</span>]</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span> ResultLength &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        [<span class="meta">XmlElement</span>]</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span> EndIndex &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;      </span><br><span class="line">        [<span class="meta">XmlElement(ElementName =<span class="meta-string">"Item"</span>)</span>]</span><br><span class="line">        <span class="keyword">public</span> List&lt;rokuparseritem&gt; ParserItems &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    [<span class="meta">XmlRoot(ElementName = <span class="meta-string">"Item"</span>)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">RokuParserItem</span></span><br><span class="line">    &#123;</span><br><span class="line">        [<span class="meta">XmlElement</span>]</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">string</span> Title &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        [<span class="meta">XmlElement</span>]</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span> ContentId &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        [<span class="meta">XmlElement</span>]</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">string</span> StreamFormat &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        [<span class="meta">XmlElement</span>]</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">string</span> Synopsis &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        [<span class="meta">XmlAttribute</span>]</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">string</span> SdImg &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        [<span class="meta">XmlAttribute</span>]</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">string</span> HdImg &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        [<span class="meta">XmlAttribute</span>]</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">string</span> ThumbnailURL &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        [<span class="meta">XmlElement</span>]</span><br><span class="line">        <span class="keyword">public</span> RokuMediaItem MediaItem &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    [<span class="meta">XmlRoot(ElementName = <span class="meta-string">"MediaItem"</span>)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">RokuMediaItem</span></span><br><span class="line">    &#123;</span><br><span class="line">        [<span class="meta">XmlElement</span>]</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">string</span> StreamUrl &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        [<span class="meta">XmlElement</span>]</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">string</span> ThumbnailURL &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="Service-Architecture"><a href="#Service-Architecture" class="headerlink" title="Service Architecture"></a>Service Architecture</h2><p>  <img src="https://lh3.googleusercontent.com/-cSIsG5S_7Gs/WwLu7ClH8_I/AAAAAAAGsBc/Kmn4UR7fgisUeCGgzxWwT5YAc3SZz8dHwCHMYCw/image_thumb%255B26%255D?imgmax=800" alt="image"></p><p><strong>IParserService</strong> – Base Interface for Service<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public interface IParserService&lt;t&gt; where T : IParserModel</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function">Task&lt;t&gt; <span class="title">ParseContent</span>(<span class="params"></span>)</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p> <strong>BaseParserSerivce<t></t></strong> - Abstract Layer for Paser Service Class. This will have empty virtual method for now.<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public abstract class BaseParserService&lt;t&gt; : IParserService&lt;t&gt; where T : IParserModel, new()</span><br><span class="line">    &#123;       </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">async</span> <span class="keyword">virtual</span> Task&lt;t&gt; <span class="title">ParseContent</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">await</span> Task.FromResult(<span class="keyword">new</span> T());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p><strong>RokuFeedParserService</strong> – This is the service class for the Roku Format that holds all the core logic extract the content items from the feed. It takes the feedURL in constructor and override the parseContent method to implement Feed Based Parsing Service. I used the <a href="https://msdn.microsoft.com/en-us/library/system.servicemodel.syndication.syndicationfeed.aspx" target="_blank" rel="noopener">SyndicationFeed</a> library from .net to parse RSS and atom feed. The base RokuFeedParserService will parse the feed and populate the list of items in <strong>SyndicationItems</strong> Property. Later, the child class that will be inhertiing from <strong>RokuFeedParserService</strong> will use the <strong>SyndicationItems</strong> values to create custom formatted the xml / json output based on the streaming format requested.<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">public class RokuFeedParserService : BaseParserService&lt;rokufeedparsermodel&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">string</span> FeedURL &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">RokuFeedParserService</span>(<span class="params"><span class="keyword">string</span> _feedURL</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            FeedURL = _feedURL;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">async</span> <span class="keyword">override</span> Task&lt;rokufeedparsermodel&gt; <span class="title">ParseContent</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            RokuFeedParserModel parserModel = <span class="keyword">new</span> RokuFeedParserModel() &#123; SyndicationItems = <span class="keyword">new</span> List&lt;isyndicationitem&gt;() &#125;;</span><br><span class="line">            <span class="keyword">using</span> (XmlReader xmlReader = XmlReader.Create(FeedURL, <span class="keyword">new</span> XmlReaderSettings() &#123; Async = <span class="literal">true</span> &#125;))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">var</span> reader = <span class="keyword">new</span> RssFeedReader(xmlReader);</span><br><span class="line">                <span class="keyword">while</span> (<span class="keyword">await</span> reader.Read())</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">switch</span> (reader.ElementType)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">case</span> SyndicationElementType.Item:</span><br><span class="line">                            parserModel.SyndicationItems.Add(<span class="keyword">await</span> reader.ReadItem());</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> parserModel;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p> <strong>Ch9RokuParserService</strong> – This is the child service class for Channel9 feed and it will override the parseContent method to populate RokuFeedParserModel object based on SyndicateItems values. This will return the final output of Roku based parser model object. We will be adding additional service classes for supporting other formats here.<br> <figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Ch9RokuParserService</span> : <span class="title">RokuFeedParserService</span></span><br><span class="line">   &#123;</span><br><span class="line">       </span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="title">Ch9RokuParserService</span>(<span class="params"><span class="keyword">string</span> _feedURL</span>) : <span class="title">base</span>(<span class="params">_feedURL</span>)</span></span><br><span class="line"><span class="function"></span>       &#123;</span><br><span class="line">           </span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">async</span> <span class="keyword">override</span> Task&lt;rokufeedparsermodel&gt; <span class="title">ParseContent</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>       &#123;</span><br><span class="line">           <span class="keyword">var</span> parserModel = <span class="keyword">await</span> <span class="keyword">base</span>.ParseContent();</span><br><span class="line">           parserModel.ParserItems = <span class="keyword">new</span> List&lt;rokuparseritem&gt;();</span><br><span class="line">           <span class="keyword">int</span> currIndex = <span class="number">0</span>;</span><br><span class="line">           <span class="keyword">foreach</span>(<span class="keyword">var</span> syndicationItem <span class="keyword">in</span> parserModel.SyndicationItems)</span><br><span class="line">           &#123;</span><br><span class="line">               RokuParserItem parserItem = <span class="keyword">new</span> RokuParserItem();</span><br><span class="line">               parserItem.Title = syndicationItem.Title;</span><br><span class="line">               parserItem.ContentId = currIndex;</span><br><span class="line">               parserItem.StreamFormat = <span class="string">"mp4"</span>;</span><br><span class="line">               parserItem.MediaItem = <span class="keyword">new</span> RokuMediaItem();</span><br><span class="line">               parserItem.MediaItem.StreamUrl = syndicationItem.Links.FirstOrDefault(i =&gt; i.RelationshipType == <span class="string">"enclosure"</span>)?.Uri.ToString();</span><br><span class="line">               parserModel.ParserItems.Add(parserItem);</span><br><span class="line">               currIndex++;</span><br><span class="line">           &#125;</span><br><span class="line">           parserModel.ResultLength = currIndex;</span><br><span class="line">           parserModel.EndIndex = currIndex;</span><br><span class="line">           <span class="keyword">return</span> parserModel;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><h2 id="Controllers"><a href="#Controllers" class="headerlink" title="Controllers"></a>Controllers</h2><p><strong>BaseAPIController</strong> – This is the base API controller and it will have the default annotationattributes for APIController and Route Actions. Note that i am using APIController Attribute that denotes a Web API controller class and it provides some useful methods and properties by coupling with ControllerBase method such as automatic 400 responses and more. I have also defined the default route [Route(“api/<strong>[controller]</strong>“)] at base class level so that i dont have to redefine this on every other controller.<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">ApiController</span>]</span><br><span class="line">    [<span class="meta">Route(<span class="meta-string">"api/[controller]"</span>)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">BaseAPIController</span> : <span class="title">ControllerBase</span></span><br><span class="line">    &#123;        </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">BaseAPIController</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line"> </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p><strong>Ch9Controller</strong> – This controller will have all the GET methods for various streaming boxes and produces the xml or json output. Note that, i am using HttpGet(“Roku”) so that it allows me to have multiple GET methods on single controller. you can also define your Routing by action like [HttpGet(“[action]”)] and then you can call the API with the method name like /API/Ch9/GetRokuFormat<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Ch9Controller</span> : <span class="title">BaseAPIController</span></span><br><span class="line">    &#123;       </span><br><span class="line">        [<span class="meta">HttpGet(<span class="meta-string">"Roku"</span>)</span>] </span><br><span class="line">        [<span class="meta">Produces(<span class="meta-string">"application/xml"</span>)</span>]</span><br><span class="line">        <span class="function"><span class="keyword">public</span> RokuFeedParserModel <span class="title">GetRokuFormat</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;           </span><br><span class="line">            <span class="keyword">var</span> parserService = <span class="keyword">new</span> Ch9RokuParserService(<span class="string">"https://s.ch9.ms/Feeds/RSS"</span>);            </span><br><span class="line">            <span class="keyword">return</span> parserService.ParseContent().Result;   </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p> <strong>Startup.cs</strong> - In my startup class, i have enabled both XML and JSON formatter to support both format based on the request. You can also create custom formatter<br>if you need other than XML / Json. Note that i have enabled RespectBrowserAcceptHeader = true to support the XML output. Also, i have used the XML Annotation to change the<br>element name and added the XMLIgnore Attribute to ignore from serialization.<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Startup</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Startup</span>(<span class="params">IConfiguration configuration</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Configuration = configuration;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> IConfiguration Configuration &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// This method gets called by the runtime. Use this method to add services to the container.</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ConfigureServices</span>(<span class="params">IServiceCollection services</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        services.AddMvc(options =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            options.RespectBrowserAcceptHeader = <span class="literal">true</span>;                </span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="comment">//support application/xml</span></span><br><span class="line">        .AddXmlSerializerFormatters()</span><br><span class="line">        <span class="comment">//support application/json</span></span><br><span class="line">        .AddJsonOptions(options =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// Force Camel Case to JSON</span></span><br><span class="line">            options.SerializerSettings.ContractResolver = <span class="keyword">new</span> CamelCasePropertyNamesContractResolver();</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// This method gets called by the runtime. Use this method to configure the HTTP request pipeline.</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Configure</span>(<span class="params">IApplicationBuilder app, IHostingEnvironment env</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">if</span> (env.IsDevelopment())</span><br><span class="line">        &#123;</span><br><span class="line">            app.UseDeveloperExceptionPage();</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        app.UseMvcWithDefaultRoute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>Program.cs</strong> - I used the default settings to start the kestrel web server and configured to the use the 5000 port for hosted application to listening on that port. This will be used when we deploy the application Raspberry PI later.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            BuildWebHost(args).Run();</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IWebHost <span class="title">BuildWebHost</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span> =&gt;</span><br><span class="line">            WebHost.CreateDefaultBuilder(args)</span><br><span class="line">                .UseStartup&lt;startup&gt;()</span><br><span class="line">                .UseUrls(<span class="string">"http://*:5000"</span>)</span><br><span class="line">                .Build();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>Now that we have done the coding for our channel9 feed Web API to support Roku XML format, let us run the application first using IIS express to make sure it works.  </p><p><a href="https://lh3.googleusercontent.com/-h28tETPw9SU/WwLadc_nKNI/AAAAAAAGsAU/e8U-pwxe2wIUzpprQ6uqgNl96PAA-7f4QCHMYCw/s1600-h/image%255B12%255D" target="_blank" rel="noopener"><img src="https://lh3.googleusercontent.com/-g6IN63trdm8/WwLafo4A2HI/AAAAAAAGsAY/h9OV9A0nl7Ebd9Ixx2auMfiP9mCtK2ARQCHMYCw/image_thumb%255B8%255D?imgmax=800" alt="image" title="image"></a></p><h2 id="Deploying-Net-Core-Web-API-on-Raspberry-PI"><a href="#Deploying-Net-Core-Web-API-on-Raspberry-PI" class="headerlink" title="Deploying .Net Core Web API on Raspberry PI"></a>Deploying .Net Core Web API on Raspberry PI</h2><p>Now, that our application produced the xml output as expected, we will deploy this latest .Net Core 2.1 Web API in our Raspberry PI. Please note that .Net Core runs only on Raspberry PI 2 / 3. It does not run on Pi Zero. The Raspberry PI that i have is currently running on Raspian OS.  </p><p>Before we deploy our application, As a first step, we have to install the .Net Core SDK and Runtime on Raspberry PI. In order to install the SDK, we will be executing the below commands on PI terminal window. I already have remote connection enabled from my laptop for my PI. I have also enabled network share from my PI so that i can publish the code later using windows file share. If you want to know how to enable to remote connection and file sharing for your Raspberry PI , visit the daveJ article about <a href="http://thisdavej.com/beginners-guide-to-installing-node-js-on-a-raspberry-pi/" target="_blank" rel="noopener">Beginner’s Guide to Installing Node.js on a Raspberry Pi</a> and he explained all the steps in details.<br>Launch the remote connection and connect to the PI Server. Launch the terminal window and run the following commands.  </p><p>$ sudo apt-get -y update<br>$ sudo apt-get -y install libunwind8 gettext<br>$ wget <a href="https://dotnetcli.blob.core.windows.net/dotnet/Sdk/2.1.300-rc1-008673/dotnet-sdk-2.1.300-rc1-008673-linux-arm.tar.gz" target="_blank" rel="noopener">https://dotnetcli.blob.core.windows.net/dotnet/Sdk/2.1.300-rc1-008673/dotnet-sdk-2.1.300-rc1-008673-linux-arm.tar.gz</a><br>$ wget <a href="https://dotnetcli.blob.core.windows.net/dotnet/aspnetcore/Runtime/2.1.0-rc1-final/aspnetcore-runtime-2.1.0-rc1-final-linux-arm.tar.gz" target="_blank" rel="noopener">https://dotnetcli.blob.core.windows.net/dotnet/aspnetcore/Runtime/2.1.0-rc1-final/aspnetcore-runtime-2.1.0-rc1-final-linux-arm.tar.gz</a><br>$ sudo mkdir /opt/dotnet<br>$ sudo tar -xvf dotnet-sdk-2.1.300-rc1-008673-linux-arm.tar.gz -C /opt/dotnet/<br>$ sudo tar -xvf aspnetcore-runtime-2.1.0-rc1-final-linux-arm.tar.gz -C /opt/dotnet<br>$ sudo ln -s /opt/dotnet/dotnet /usr/local/bin</p><p>The first two commands are required for Raspbian for deploying .Net Core SDK and Runtime. These are some dependencies modules that has to be added manually. For more details, you can check the official documentation <a href="https://github.com/dotnet/core/blob/master/samples/RaspberryPiInstructions.md#linux" target="_blank" rel="noopener">here</a>.  </p><p>The next two <strong>WGET</strong> commands will download the latest DotNet SDK and Runtime (2.1 RC1) and then the following commands will be used to extract the output to /opt/dotnet folder and a symbolic link created for dotnet.  </p><p>If all the above steps are done with no errors, .Net Core SDK is installed on PI. Just run the command <strong>dotnet –info</strong> to display the information about DotNet SDK and Runtime details.  </p><p>Now, that we have installed the .Net Core SDK and Runtime on PI, its time to build and deploy the published code on PI. As I mentioned earlier, I have the network shared drive enabled on my PI to copy the files. You can also transfer to PI via other methods like FTP.  </p><p>As a first step, Lets publish the application in Linux ARM architecture since Raspbian is based on Linux. Navigate to the project folder and execute the following command to publish the output.  </p><p><strong>dotnet publish . -r linux-arm</strong></p><p><a href="https://lh3.googleusercontent.com/-s7KKw4g4Yv4/WwLahyF-tLI/AAAAAAAGsAc/suGMwuFH2_su5IpLzqw-IAQ_8_6pOlVdQCHMYCw/s1600-h/image%255B25%255D" target="_blank" rel="noopener"><img src="https://lh3.googleusercontent.com/-FJC_v1OXIlY/WwLajnEUdlI/AAAAAAAGsAg/6RUPaW7VCxs45WeskSsBzugnHjc7rAuQwCHMYCw/image_thumb%255B15%255D?imgmax=800" alt="image" title="image"></a>  </p><p>if you want to publish in release mode, you can add <strong>-c release</strong> attribute.  </p><p>The code is published in Linux-arm\Publish folder. Now, I will create a folder in PI server called VideoParserAPI and copy all the files from linux-arm\publish folder and paste into VideoParserAPI folder in PI Server.  </p><p>Now the code is published in to PI, we will just the run the application to start the service listening on port 5000. Remember in my startup class, i used the Port No 5000 to listen for network connection. Remember, this is my personal project and i will be using it only in my internal network and i have no intention to publish it on internet. If you have the application that needs to be published on internet, you may have to use reverse proxy like nginx to configure port 80 and reroute to kestrel web server for best practices.  </p><p><a href="https://lh3.googleusercontent.com/-hi881h43Gvc/WwLamEMZWWI/AAAAAAAGsAk/T5uRcPavZAg7L8SM6rvNmDQTwOA6BjhIgCHMYCw/s1600-h/image%255B29%255D" target="_blank" rel="noopener"><img src="https://lh3.googleusercontent.com/-igCwOkjMI3M/WwLaoCuCVZI/AAAAAAAGsAo/cnstEC0xtNYLWJwDEiwJ-dqUoG7IruQ0QCHMYCw/image_thumb%255B17%255D?imgmax=800" alt="image" title="image"></a>  </p><p>Lets run the application to start the services. Open the Terminal Window on PI Server and execute the ./VideoParserAPI to run the application. It a few seconds, the service will start and listening on Port 5000.<br><a href="https://lh3.googleusercontent.com/-hVOqTIAWGks/WwLap0wV3hI/AAAAAAAGsAs/QUMZB_e-hfwvYjn9o2mDclVZrFspLtS-wCHMYCw/s1600-h/image%255B33%255D" target="_blank" rel="noopener"><img src="https://lh3.googleusercontent.com/-ePdk_TWssM8/WwLarvgNWxI/AAAAAAAGsAw/bOaqIelfUjA5LArEUf9WVfKZTTckT-QVwCHMYCw/image_thumb%255B19%255D?imgmax=800" alt="image" title="image"></a>  </p><p>Lets call the web API from my system to see the output.  </p><p><a href="http://pi:5000/api/ch9/roku" target="_blank" rel="noopener">http://pi:5000/api/ch9/roku</a>  </p><p><a href="https://lh3.googleusercontent.com/-nLpTM6Hemu8/WwLautVAy5I/AAAAAAAGsA4/2FcuBTRszLMBAJAVUnZY3M_vdtj7FX7HACHMYCw/s1600-h/image%255B39%255D" target="_blank" rel="noopener"><img src="https://lh3.googleusercontent.com/-gCvGQQl386Q/WwLaw85koOI/AAAAAAAGsA8/VpSdYi0AUK4t5alSOStRSCEGhueYSc_2ACHMYCw/image_thumb%255B23%255D?imgmax=800" alt="image" title="image"></a>  </p><p>There you go. Web API Application developed in Latest .Net Core 2.1 is running on Raspberry PI. <img src="https://lh3.googleusercontent.com/-30WIS4h_zkY/WwLayxJuG7I/AAAAAAAGsBA/0CuhttLO3_4Ia3UcnZ1l8McxUnCkd5twQCHMYCw/wlEmoticon-smile%255B2%255D?imgmax=800" alt="Smile">  </p><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>I have created design pattern to handle all the core parsing logic in the base classes so that we don’t have to rewrite the logic for every other streaming boxes. however, we can customize the logic to change the output xml / json content based on the streaming box in appropriate child class.  </p><p>In future, I will be developing an android app to consume these web api to play the content in my mobile with chromecast support. We can also extend this library to any other streaming box (Apple TV, Fire TV) . I also planned to deploy this web API app inside the docker in my Raspberry PI later.  </p><p>I hope this will help you to get going with your crazy ideas.  </p><p>The entire source code is uploaded to <a href="https://github.com/vavjeeva/VideoParserAPI/" target="_blank" rel="noopener">github</a>.  </p><p>Happy Coding !!!</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This article explains how to create generic parser API to parse video feeds from various sites that supports RSS/Atom feed or scraping the content from DOM element and return the custom XML / JSON output based on requested streaming box supported format. The core parsing logic will be implemented in base class and then custom formatting logic will be implemented in the appropriate child classes. Later in the article, we will also deploy this application into Raspian based Raspberry PI. We are using the latest .Net Core SDk 2.1 RC release for developing the web API. In my earlier &lt;a href=&quot;http://www.jeevasubburaj.com/2018/03/how-to-build-personal-web-server-using.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;article&lt;/a&gt; , i developed the similar application using NodeJS and Express and deployed in Raspberry PI.  &lt;/p&gt;
    
    </summary>
    
    
      <category term="Raspberry PI" scheme="https://jeevasubburaj.com/tags/Raspberry-PI/"/>
    
      <category term=".Net Core" scheme="https://jeevasubburaj.com/tags/Net-Core/"/>
    
  </entry>
  
  <entry>
    <title>Simultaneous Data Queue Polling Request Processing in SQL Server</title>
    <link href="https://jeevasubburaj.com/2018/04/30/simultaneous-data-queue-polling-request/"/>
    <id>https://jeevasubburaj.com/2018/04/30/simultaneous-data-queue-polling-request/</id>
    <published>2018-04-30T22:22:00.000Z</published>
    <updated>2019-03-15T17:33:45.193Z</updated>
    
    <content type="html"><![CDATA[<p>In My <a href="http://www.jeevasubburaj.com/2018/04/sql-server-tips-sql-server-paging-made.html" target="_blank" rel="noopener">last post</a>, we learned how to use the SQL server paging effectively in real word application. This post is another SQL Server tip to implement simultaneous data queue processing in SQL Server. In many of our enterprise applications, we have the design to handle incoming request comes from the multiple sources by putting into queue (MSMQ or SQL Server table) and process it later by processing engine.  </p><p>This article explains about how to process the stored requests from SQL table by mutiple engine simultaneously running in app farm. We need an way to process those requests by multiple engine simultaneously but if one engine is picked the request, other engine should not be picking it and at the same time, table should not be locked for reading other records.<br><a id="more"></a><br>In SQL Server, we have the concept called <a href="https://docs.microsoft.com/en-us/sql/t-sql/queries/hints-transact-sql-table?view=sql-server-2017" target="_blank" rel="noopener">Table Hints</a> which are specified in the FROM clause of the DML statement and affect only the table or view referenced in that clause. There are various types of table hints are available but we are going to look into UPDLOCK, READPAST for this scenario.  </p><h4 id="UPDLOCK"><a href="#UPDLOCK" class="headerlink" title="UPDLOCK"></a>UPDLOCK</h4><p>Specifies that update locks are to be taken and held until the transaction completes. UPDLOCK takes update locks for read operations only at the row-level or page-level.  </p><h4 id="READPAST"><a href="#READPAST" class="headerlink" title="READPAST"></a>READPAST</h4><p>Specifies that the Database Engine not read rows that are locked by other transactions. When READPAST is specified, row-level locks are skipped but page-level locks are not skipped.  </p><p>So, by combining UPDLOCK, READPAST in our DML statement, it provides the locking for thes rows selected by the first engine and not to return those rows to other engine even if the request comes simultaneously.  </p><p>In this example query below, we are performing the data queue operations to select 10 records at a time by each engine and once its picked, it need to update the record status to PICKED and also other engine should be able read the other records in parallel.  </p><p>In SQL Server, we have  <a href="https://docs.microsoft.com/en-us/sql/t-sql/queries/output-clause-transact-sql?view=sql-server-2017" target="_blank" rel="noopener">OUTPUT clause</a> which returns the information based on each row affected by an INSERT, UPDATE, DELETE, or MERGE statement. So, we will use the output clause logic to return the rows that we are updating to PICKED status and we use UPDLOCK,READPAST table hints to select the rows so that it locks those rows and it wont be available for other engine as well.</p><p>The below query will return 10 unprocessed rows for each request from engine and also updates those record status to PICKED. This also takes care of handling requests simultaneously.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> incoming_request <span class="keyword">SET</span> status_value = <span class="string">'PICK'</span> <span class="keyword">OUTPUT</span> INSERTED.* </span><br><span class="line"><span class="keyword">WHERE</span> request_id <span class="keyword">in</span> </span><br><span class="line">(<span class="keyword">SELECT</span> top <span class="number">10</span> request_id </span><br><span class="line"><span class="keyword">FROM</span> incoming_request <span class="keyword">WITH</span> (updlock, readpast) </span><br><span class="line"><span class="keyword">WHERE</span> status_value = <span class="string">'UNPC'</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> request_id <span class="keyword">ASC</span>)</span><br></pre></td></tr></table></figure><p>Happy Coding!</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;In My &lt;a href=&quot;http://www.jeevasubburaj.com/2018/04/sql-server-tips-sql-server-paging-made.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;last post&lt;/a&gt;, we learned how to use the SQL server paging effectively in real word application. This post is another SQL Server tip to implement simultaneous data queue processing in SQL Server. In many of our enterprise applications, we have the design to handle incoming request comes from the multiple sources by putting into queue (MSMQ or SQL Server table) and process it later by processing engine.  &lt;/p&gt;
&lt;p&gt;This article explains about how to process the stored requests from SQL table by mutiple engine simultaneously running in app farm. We need an way to process those requests by multiple engine simultaneously but if one engine is picked the request, other engine should not be picking it and at the same time, table should not be locked for reading other records.&lt;br&gt;
    
    </summary>
    
    
      <category term="SQL Server" scheme="https://jeevasubburaj.com/tags/SQL-Server/"/>
    
      <category term="Tips" scheme="https://jeevasubburaj.com/tags/Tips/"/>
    
  </entry>
  
  <entry>
    <title>SQL Server Tips : SQL Server Paging made easy with OFFSET and FETCH Keyword</title>
    <link href="https://jeevasubburaj.com/2018/04/27/sql-server-tips-sql-server-paging-made/"/>
    <id>https://jeevasubburaj.com/2018/04/27/sql-server-tips-sql-server-paging-made/</id>
    <published>2018-04-27T15:42:00.000Z</published>
    <updated>2019-03-15T17:33:51.546Z</updated>
    
    <content type="html"><![CDATA[<p>In Real world enterprise applications, we often perform long running batch operations for huge number of records. Typically, we load the data upfront from database one time and load it into memory via datatable or in some other forms (main table and other supported tables) and then loop through individual records in Parallel For Each for better performance. However, in some cases, if the data load is huge, we may end up having memory issues loading all the records upfront so we load each individual records inside the loop in sql which could potentially affects the performance of the job.  </p><a id="more"></a><p>In order to handle this scenario,we have to address avoiding memory exceptions and also not to read the data for each record in sql. The SQL paging concept comes in handy to address this issues by fetching rows in slice with some limit (eg: 20K rows at a time) and perform the parrellel operations in the loop.  </p><p>In SQL Server 2012, Microsoft introduced <a href="https://technet.microsoft.com/en-us/library/gg699618(v=sql.110" target="_blank" rel="noopener">OFFSET and FETCH keyword</a>.aspx) to apply the paging in SQL query results. We will loop for every 20k records and perform the parrellel operations instead of individual records.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">First</span> <span class="keyword">Name</span> + <span class="string">' '</span> + <span class="keyword">Last</span> <span class="keyword">Name</span> <span class="keyword">FROM</span> Employees </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">First</span> <span class="keyword">Name</span> <span class="keyword">OFFSET</span> <span class="number">10</span> <span class="keyword">ROWS</span> <span class="keyword">FETCH</span> <span class="keyword">NEXT</span> <span class="number">5</span> <span class="keyword">ROWS</span> <span class="keyword">ONLY</span>;</span><br></pre></td></tr></table></figure><p>This will skip the first 10 rows and return the next 5 rows.  </p><h4 id="Limitations-in-Using-OFFSET-FETCH"><a href="#Limitations-in-Using-OFFSET-FETCH" class="headerlink" title="Limitations in Using OFFSET-FETCH"></a>Limitations in Using OFFSET-FETCH</h4><ul><li>ORDER BY is mandatory to use OFFSET and FETCH clause.</li><li>OFFSET clause is mandatory with FETCH. You can never use, ORDER BY … FETCH.</li><li>TOP cannot be combined with OFFSET and FETCH in the same query expression.</li><li>The OFFSET/FETCH rowcount expression can be any arithmetic, constant, or parameter expression that will return an integer value. The rowcount expression does not support scalar sub-queries.</li></ul><p>In the real world application, i will be using it like<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> startIndex = <span class="number">0</span></span><br><span class="line"><span class="keyword">int</span> offset = <span class="number">20000</span></span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">&#123;</span><br><span class="line"> <span class="comment">//Execute the SQL query to load the data by passing the startIndex and Offset. </span></span><br><span class="line"> <span class="comment">//SELECT * FROM PERSON order by PERSON_ID OFFSET @STARTINDEX ROWS        </span></span><br><span class="line">        <span class="comment">//FETCH          NEXT @OFFSET ROWS ONLY</span></span><br><span class="line"> <span class="keyword">if</span>(no rows) <span class="keyword">break</span>; <span class="comment">// Break the loop since no rows to process</span></span><br><span class="line">   System.Threading.Tasks.ParallelOptions po = <span class="keyword">new</span> System.Threading.Tasks.ParallelOptions();</span><br><span class="line">          po.MaxDegreeOfParallelism = MAX_THREAD_LIMIT</span><br><span class="line">  System.Threading.Tasks.Parallel.ForEach(queryData, po, row =&gt;</span><br><span class="line"> &#123;</span><br><span class="line">                </span><br><span class="line"> &#125;</span><br><span class="line"> startIndex = startIndex + offset + <span class="number">1</span>;                    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Happy coding!</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;In Real world enterprise applications, we often perform long running batch operations for huge number of records. Typically, we load the data upfront from database one time and load it into memory via datatable or in some other forms (main table and other supported tables) and then loop through individual records in Parallel For Each for better performance. However, in some cases, if the data load is huge, we may end up having memory issues loading all the records upfront so we load each individual records inside the loop in sql which could potentially affects the performance of the job.  &lt;/p&gt;
    
    </summary>
    
    
      <category term="C#" scheme="https://jeevasubburaj.com/tags/C/"/>
    
      <category term="SQL Server" scheme="https://jeevasubburaj.com/tags/SQL-Server/"/>
    
      <category term="Performance" scheme="https://jeevasubburaj.com/tags/Performance/"/>
    
  </entry>
  
  <entry>
    <title>Android App - Free PacktPub Ebook Notifier (Weekend Project)</title>
    <link href="https://jeevasubburaj.com/2018/04/19/android-app-free-packtpub-ebook/"/>
    <id>https://jeevasubburaj.com/2018/04/19/android-app-free-packtpub-ebook/</id>
    <published>2018-04-19T18:35:00.001Z</published>
    <updated>2019-03-15T17:32:06.349Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.packtpub.com/" target="_blank" rel="noopener">PacktPub</a> is one of the great ebook and videos site for tech users and they offer one <a href="https://www.packtpub.com/packt/offers/free-learning" target="_blank" rel="noopener">free ebook</a> everyday. Most of the time, i forget to visit the site so i missed lot of free good ebooks and regret it later. So, i decided to create a weekend side project to explore <a href="https://kotlinlang.org/docs/reference/" target="_blank" rel="noopener">kotlin language</a> and also to refresh my android skills by understanding latest <a href="https://developer.android.com/about/versions/oreo/background.html" target="_blank" rel="noopener">andriod O background processing limitations.</a><br><a id="more"></a><br>It took some time to understand the basic kotlin language concepts (like <a href="https://kotlinlang.org/docs/reference/object-declarations.html" target="_blank" rel="noopener">companion objects</a>, <a href="https://kotlinlang.org/docs/reference/null-safety.html" target="_blank" rel="noopener">null safety</a>) but its a good oppertunity for .Net developers to explore this language rather than coding in java for android apps. Kotlin also provides some real <a href="https://kotlinlang.org/docs/tutorials/android-plugin.html" target="_blank" rel="noopener">good extensions plugins</a> to eliminate lot of boilerplate android code like findviewbyid.    </p><h3 id="Application-Overview"><a href="#Application-Overview" class="headerlink" title="Application Overview"></a>Application Overview</h3><p><img src="https://4.bp.blogspot.com/-xSGbXptB6yo/WtjfEc1unoI/AAAAAAAGnS4/uZqgkm2LZlglHbgS2LgDs8k5gr-1SNA6gCLcBGAs/s1600/free_ebook_notifier_app.png" alt></p><p>This app launches the main activity with asynctask in background to parse the content to get the free ebook title, image url and render it on the main activity. It also check the site periodically (based on settings) and notify the user.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> : <span class="type">AppCompatActivity</span></span>(),ToolbarManager &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> Tag: String = <span class="string">"MainActivity"</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">lateinit</span> <span class="keyword">var</span> parserHelper: ParserHelper</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">lateinit</span> <span class="keyword">var</span> alarmManagerHelper: AlarmManagerHelper</span><br><span class="line">    <span class="keyword">var</span> mImageURL: String? = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">var</span> mTitle: String? = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">val</span> toolbar <span class="keyword">by</span> lazy &#123; find&lt;toolbar&gt;(R.id.toolbar) &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState)</span><br><span class="line">        setContentView(R.layout.activity_main)</span><br><span class="line">        initToolbar()</span><br><span class="line">        toolbarTitle = getString(app_name)</span><br><span class="line"> </span><br><span class="line">        claimThisBook.setOnClickListener &#123;</span><br><span class="line">            <span class="keyword">val</span> intent = Intent(Intent.ACTION_VIEW)</span><br><span class="line">                    .setData(Uri.parse(getString(R.string.FREE_BOOK_URL)))</span><br><span class="line">            startActivity(intent)</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">//Call the Async Task</span></span><br><span class="line">        LoadContentTask().execute()</span><br><span class="line"> </span><br><span class="line">        <span class="comment">//Setting the Broadcast Alert</span></span><br><span class="line">        alarmManagerHelper = AlarmManagerHelper(<span class="keyword">this</span>)</span><br><span class="line">        alarmManagerHelper.setBroadCastAlert(<span class="literal">false</span>)</span><br><span class="line"> </span><br><span class="line">        <span class="comment">//Enable the BootReceiver</span></span><br><span class="line">        enableBootReceiver()</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">enableBootReceiver</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">val</span> receiver = ComponentName(<span class="keyword">this</span>, BootReceiver::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>)</span></span><br><span class="line">        <span class="keyword">val</span> pm = <span class="keyword">this</span>.packageManager</span><br><span class="line">        pm.setComponentEnabledSetting(receiver,</span><br><span class="line">                PackageManager.COMPONENT_ENABLED_STATE_ENABLED,</span><br><span class="line">                PackageManager.DONT_KILL_APP)</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">inner</span> <span class="class"><span class="keyword">class</span> <span class="title">LoadContentTask</span> : <span class="type">AsyncTask</span>&lt;<span class="type">unit unit=""</span>&gt;</span>() &#123;</span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">doInBackground</span><span class="params">(<span class="keyword">vararg</span> p0: <span class="type">Unit</span>)</span></span> &#123;</span><br><span class="line">            parserHelper = ParserHelper(<span class="keyword">this</span><span class="symbol">@MainActivity</span>);</span><br><span class="line">            <span class="keyword">val</span> (title, imageURL) = parserHelper.parsePacktPubFreeBook()</span><br><span class="line">            mTitle = title</span><br><span class="line">            mImageURL = imageURL</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onPostExecute</span><span class="params">(result: <span class="type">Unit</span>)</span></span> &#123;</span><br><span class="line">            <span class="keyword">super</span>.onPostExecute(result)</span><br><span class="line">            Glide.with(<span class="keyword">this</span><span class="symbol">@MainActivity</span>).load(mImageURL).into(imageView)</span><br><span class="line">            titleView.text = mTitle</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>I have created AlarmManagerHelper class to set the repeating alarm based on the sync frequency settings. The Sync Frequency Settings are stored in SharedPreferences.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">internal</span> <span class="class"><span class="keyword">class</span> <span class="title">AlarmManagerHelper</span></span>(ctx: Context) : ContextWrapper(ctx) &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">setBroadCastAlert</span><span class="params">(argRefreshAlarm: <span class="type">Boolean</span>)</span></span> &#123;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">var</span> refreshAlarm = argRefreshAlarm</span><br><span class="line">        <span class="keyword">val</span> alarmManager = <span class="keyword">this</span>.getSystemService(Activity.ALARM_SERVICE) <span class="keyword">as</span> AlarmManager</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">val</span> notificationIntent = Intent(Constants.ALARM_RECEIVER_INTENT_TRIGGER)</span><br><span class="line">        notificationIntent.setClass(<span class="keyword">this</span>, NotificationReceiver::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>)</span></span><br><span class="line"> </span><br><span class="line">        <span class="keyword">var</span> pendingIntent = PendingIntent.getBroadcast(<span class="keyword">this</span>, <span class="number">0</span>, notificationIntent, PendingIntent.FLAG_NO_CREATE)</span><br><span class="line">        <span class="keyword">if</span> (pendingIntent == <span class="literal">null</span>) &#123;</span><br><span class="line">            pendingIntent = PendingIntent.getBroadcast(<span class="keyword">this</span>, <span class="number">0</span>, notificationIntent, PendingIntent.FLAG_UPDATE_CURRENT)</span><br><span class="line">            refreshAlarm = <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (refreshAlarm) &#123;</span><br><span class="line">            <span class="keyword">val</span> syncFrequency: String <span class="keyword">by</span> DelegatesExt.preference(<span class="keyword">this</span>, Constants.SYNC_FREQUENCY_NAME, Constants.SYNC_FREQUENCY_DEFAULT_VALUE)</span><br><span class="line">            <span class="keyword">val</span> syncFrequencyLong = syncFrequency.toLong()</span><br><span class="line">            <span class="keyword">var</span> finalCalInMillis: <span class="built_in">Long</span> = System.currentTimeMillis() + (syncFrequencyLong * AlarmManager.INTERVAL_HOUR)</span><br><span class="line">            alarmManager.setRepeating(AlarmManager.RTC_WAKEUP, finalCalInMillis, (syncFrequencyLong * AlarmManager.INTERVAL_HOUR) , pendingIntent)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>From Android O, there are lot of limitations on <a href="https://developer.android.com/about/versions/oreo/background.html" target="_blank" rel="noopener">background execution limits</a> and you can read all those details in <a href="https://developer.android.com/about/versions/oreo/background.html" target="_blank" rel="noopener">android developer guide</a>. For this project, i need a background job that should run periodically based on frequency settings defined in the app and send the notification to user with the book title. I used JobIntentService to do the background work and send the notification to user</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NotificationService</span> : <span class="type">JobIntentService</span></span>() &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">lateinit</span> <span class="keyword">var</span> notiHelper: NotificationHelper</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">lateinit</span> <span class="keyword">var</span> parserHelper: ParserHelper</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">companion</span> <span class="keyword">object</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">const</span> <span class="keyword">val</span> JOB_ID = <span class="number">1000</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">const</span> <span class="keyword">val</span> NOTI_PRIMARY = <span class="number">1100</span></span><br><span class="line"> </span><br><span class="line">        <span class="function"><span class="keyword">fun</span> <span class="title">enqueueWork</span><span class="params">(ctx: <span class="type">Context</span>, intent: <span class="type">Intent</span>)</span></span> &#123;</span><br><span class="line">            enqueueWork(ctx, NotificationService::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>, <span class="type">JOB_ID</span>, <span class="type">intent)</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onHandleWork</span><span class="params">(intent: <span class="type">Intent</span>)</span></span> &#123;</span><br><span class="line"> </span><br><span class="line">        notiHelper = NotificationHelper(<span class="keyword">this</span>)</span><br><span class="line">        parserHelper = ParserHelper(<span class="keyword">this</span>);</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">val</span>(title) = parserHelper.parsePacktPubFreeBook()</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">val</span> pendingIntent = PendingIntent.getActivity(<span class="keyword">this</span>, <span class="number">0</span>, intent, <span class="number">0</span>)</span><br><span class="line">        notiHelper.notify(NOTI_PRIMARY, notiHelper.getNotification(getString(R.string.noti_title), title,pendingIntent))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>I also created BootReceiver with BOOT_COMPLETED intent so that repeating alarm will get set even in the event of phone is restarted.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BootReceiver</span> : <span class="type">BroadcastReceiver</span></span>() &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">lateinit</span> <span class="keyword">var</span> alarmManagerHelper: AlarmManagerHelper</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onReceive</span><span class="params">(context: <span class="type">Context</span>, intent: <span class="type">Intent</span>)</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (intent.action == <span class="string">"android.intent.action.BOOT_COMPLETED"</span>) &#123;</span><br><span class="line">            alarmManagerHelper = AlarmManagerHelper(context)</span><br><span class="line">            alarmManagerHelper.setBroadCastAlert(<span class="literal">false</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>I used <a href="https://jsoup.org/" target="_blank" rel="noopener">Jsoup Library</a> to parse the HTML content. Jsoup is a Java library for working with real-world HTML. It provides a very convenient API for extracting and manipulating data, using the best of DOM, CSS, and jquery-like methods.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">internal</span> <span class="class"><span class="keyword">class</span> <span class="title">ParserHelper</span></span>(ctx: Context) : ContextWrapper(ctx) &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> tag: String = <span class="string">"ParserHelper"</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">data</span> <span class="class"><span class="keyword">class</span> <span class="title">ParserEntity</span></span>(<span class="keyword">val</span> title: String, <span class="keyword">val</span> imageURL: String?)</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">parsePacktPubFreeBook</span><span class="params">()</span></span>: ParserEntity &#123;</span><br><span class="line">        <span class="keyword">var</span> title = <span class="string">"Internet access not available"</span></span><br><span class="line">        <span class="keyword">var</span> imageURL: String? = <span class="literal">null</span></span><br><span class="line">        <span class="keyword">if</span> (isInternetConnected()) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">val</span> htmlContent = Jsoup.connect(getString(R.string.FREE_BOOK_URL)).<span class="keyword">get</span>()</span><br><span class="line">                title = htmlContent.select(<span class="string">"div[class=dotd-title]"</span>).text()</span><br><span class="line">                imageURL = <span class="string">"http:"</span> + htmlContent.select(<span class="string">"img[class=bookimage imagecache imagecache-dotd_main_image]"</span>).attr(<span class="string">"src"</span>)</span><br><span class="line">            &#125; <span class="keyword">catch</span> (e: Exception) &#123;</span><br><span class="line">                Log.e(tag, <span class="string">"Error in fetching the content "</span> + e.printStackTrace())</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">return</span> ParserEntity(title, imageURL)</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">isInternetConnected</span><span class="params">()</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">        <span class="keyword">val</span> cm = <span class="keyword">this</span>.getSystemService(Context.CONNECTIVITY_SERVICE) <span class="keyword">as</span> ConnectivityManager</span><br><span class="line">        <span class="keyword">val</span> activeNetwork = cm.activeNetworkInfo</span><br><span class="line">        <span class="keyword">return</span> activeNetwork != <span class="literal">null</span> &amp;&amp; activeNetwork.isConnectedOrConnecting</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>So, overall this project will give you the idea of how to develop an android app in kotlin including running the background job and send the notitfication to users. I have uploaded the entire source code in <a href="https://github.com/vavjeeva/FreeEBookNotifier" target="_blank" rel="noopener">github</a>.  </p><p>Happy Coding</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://www.packtpub.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;PacktPub&lt;/a&gt; is one of the great ebook and videos site for tech users and they offer one &lt;a href=&quot;https://www.packtpub.com/packt/offers/free-learning&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;free ebook&lt;/a&gt; everyday. Most of the time, i forget to visit the site so i missed lot of free good ebooks and regret it later. So, i decided to create a weekend side project to explore &lt;a href=&quot;https://kotlinlang.org/docs/reference/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;kotlin language&lt;/a&gt; and also to refresh my android skills by understanding latest &lt;a href=&quot;https://developer.android.com/about/versions/oreo/background.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;andriod O background processing limitations.&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="Kotlin" scheme="https://jeevasubburaj.com/tags/Kotlin/"/>
    
      <category term="Android" scheme="https://jeevasubburaj.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>.Net Hidden Gems - Web.Debug.Config and Web.Release.Config</title>
    <link href="https://jeevasubburaj.com/2018/04/05/net-hidden-gems-webdebugconfig-and/"/>
    <id>https://jeevasubburaj.com/2018/04/05/net-hidden-gems-webdebugconfig-and/</id>
    <published>2018-04-05T14:52:00.000Z</published>
    <updated>2019-03-15T17:33:02.496Z</updated>
    
    <content type="html"><![CDATA[<p>I am planning to post some of interesting .Net tips or hidden gems in this part of series which mostly covers only the topics / areas / features that we might have overlooked as part of our .Net development.  </p><p>Today, i am going to cover the purpose of web.debug.config and web.release.config files that are present in every web development project in addition to web.config. Usually, we ignore these two files when we deploy the code.  </p><a id="more"></a><p>These are called web.config transformation model and it allows you to modify your web.config file in an automated fashion during deployment of your applications to various server environments. So, you can create various config file like Web.Stage.Config, Web.UAT.Config file and modify your configuration settings accordingly.  </p><p>By default, it allows you to do the following transformation.  </p><ul><li>Replacing a node</li><li>Inserting a node</li><li>Delete a node</li><li>Removing Attributes</li><li>Setting Attributes</li></ul><p>You can find out more details about how and where to apply in the  <a href="https://docs.microsoft.com/en-us/aspnet/web-forms/overview/deployment/visual-studio-web-deployment/web-config-transformations" target="_blank" rel="noopener">Microsoft Documentation</a>.</p><p>Happy Coding!</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;I am planning to post some of interesting .Net tips or hidden gems in this part of series which mostly covers only the topics / areas / features that we might have overlooked as part of our .Net development.  &lt;/p&gt;
&lt;p&gt;Today, i am going to cover the purpose of web.debug.config and web.release.config files that are present in every web development project in addition to web.config. Usually, we ignore these two files when we deploy the code.  &lt;/p&gt;
    
    </summary>
    
    
      <category term="C#" scheme="https://jeevasubburaj.com/tags/C/"/>
    
      <category term=".Net" scheme="https://jeevasubburaj.com/tags/Net/"/>
    
  </entry>
  
  <entry>
    <title>How to build Personal Web API Server using Raspberry PI and NodeJs</title>
    <link href="https://jeevasubburaj.com/2018/03/27/how-to-build-personal-web-server-using/"/>
    <id>https://jeevasubburaj.com/2018/03/27/how-to-build-personal-web-server-using/</id>
    <published>2018-03-27T14:38:00.001Z</published>
    <updated>2019-03-15T17:32:52.816Z</updated>
    
    <content type="html"><![CDATA[<p>I have a various streaming box (Apple TV, Roku, Fire TV, Nexus Player) because i prefer to watch video tutorials on TV rather than watching in laptop. However, we don’t have app for all the sites that provides video tutorials. For example, <a href="https://channel9.msdn.com/" target="_blank" rel="noopener">MSDN channel9</a> dont have app for any streaming boxes. So, i decided to use roku <a href="https://sourceforge.net/p/rokusdkexamples/code/HEAD/tree/trunk/rokusdkexamples-code/videoplayer/" target="_blank" rel="noopener">sample video player app</a> to play channel 9 videos on my roku. This app expects the video content defined in certain XML format.So, I just have to build the web APIs to return the XML output dynamically. I also prefer not to host the Web APIs on the internet. I just want to host it in my home network. So, i need a web server that will be always on so, decided to use my existing Raspberry PI 3 as a web server.  </p><a id="more"></a><p>I initially thought of using .Net Core on Windows IOT but then later decided to use Raspian OS and NodeJS becuase i wanted to try NodeJS with some real world application.  </p><p>Setting up Raspian OS on Raspberry PI was pretty simple. I just followed this excellent <a href="http://thisdavej.com/beginners-guide-to-installing-node-js-on-a-raspberry-pi/" target="_blank" rel="noopener">article</a> on how to setup Raspian on Raspberry PI. Also, configured the remote connection and shared the work folder to deploy the files so i no longer need my Raspberry PI connected to my TV. I just placed the raspberry PI along with my other stream boxes and connected through my laptop using remote desktop.  </p><p>I started the Node JS Web API with the following Node Packages to parse the channel 9 feeds.  </p><ul><li><a href="https://www.npmjs.com/package/express" target="_blank" rel="noopener">Express</a></li><li><a href="https://www.npmjs.com/package/cheerio" target="_blank" rel="noopener">Cheerio</a></li><li><a href="https://www.npmjs.com/package/xmlbuilder" target="_blank" rel="noopener">XMLBuilder</a></li></ul><p>Express is one of the most famous nodejs web application framework to create Web APIs quick and easy. Cheerio is used for parsing the DOM elements. XMLBuilder is used for construct the xml output in easy way.  </p><p>To start with, i created the web server with routing as follows  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)  </span><br><span class="line"> , app = express()  </span><br><span class="line"> , server = <span class="built_in">require</span>(<span class="string">'http'</span>).createServer(app)  </span><br><span class="line"> , path = <span class="built_in">require</span>(<span class="string">'path'</span>)  </span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> parser = <span class="built_in">require</span>(<span class="string">'./lib/parser'</span>);  </span><br><span class="line"></span><br><span class="line">app.set(<span class="string">'port'</span>, <span class="number">4567</span>);  </span><br><span class="line">app.use(express.static(path.join(__dirname, <span class="string">'public'</span>)));  </span><br><span class="line"></span><br><span class="line"><span class="comment">//Routes  </span></span><br><span class="line">app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;  </span><br><span class="line"> res.sendFile(__dirname + <span class="string">'/public/index.html'</span>);  </span><br><span class="line">&#125;);  </span><br><span class="line"></span><br><span class="line">app.get(<span class="string">'/Ch9'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;  </span><br><span class="line"> parser.Ch9(<span class="function"><span class="keyword">function</span> (<span class="params">result</span>) </span>&#123;  </span><br><span class="line">  res.set(<span class="string">'Content-Type'</span>, <span class="string">'text/xml'</span>)  </span><br><span class="line">  res.send(<span class="number">200</span>, result)  </span><br><span class="line"> &#125;)  </span><br><span class="line">&#125;);  </span><br><span class="line"></span><br><span class="line">app.get(<span class="string">'/Ch9/:topic/List'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;  </span><br><span class="line"> <span class="keyword">var</span> topic = req.params.topic;  </span><br><span class="line"> parser.Ch9List(topic, <span class="function"><span class="keyword">function</span> (<span class="params">result</span>) </span>&#123;  </span><br><span class="line">  res.set(<span class="string">'Content-Type'</span>, <span class="string">'text/xml'</span>)  </span><br><span class="line">  res.send(<span class="number">200</span>, result)  </span><br><span class="line"> &#125;);  </span><br><span class="line">&#125;);  </span><br><span class="line"></span><br><span class="line">app.get(<span class="string">'/Ch9/:topic/:title/View'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;  </span><br><span class="line"> <span class="keyword">var</span> topic = req.params.topic;  </span><br><span class="line"> <span class="keyword">var</span> title = req.params.title;  </span><br><span class="line"> parser.Ch9View(topic, title, <span class="function"><span class="keyword">function</span> (<span class="params">result</span>) </span>&#123;  </span><br><span class="line">  res.set(<span class="string">'Content-Type'</span>, <span class="string">'text/xml'</span>)  </span><br><span class="line">  res.send(<span class="number">200</span>, result)  </span><br><span class="line"> &#125;);  </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>i created the parser library class and added the following code to parse the channel 9 RSS content to fetch the video URLs</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> topicLists = [<span class="string">"Shows"</span>, <span class="string">"Events"</span>, <span class="string">"Series"</span>, <span class="string">"Blogs"</span>];  </span><br><span class="line"> <span class="keyword">const</span> ch9BaseURL = <span class="string">"http://channel9.msdn.com/Browse/"</span>;  </span><br><span class="line"> exports.Ch9 = <span class="function"><span class="keyword">function</span> (<span class="params">callback</span>) </span>&#123;  </span><br><span class="line">   <span class="keyword">var</span> xml = builder.create(<span class="string">'categories'</span>);  </span><br><span class="line">   <span class="keyword">var</span> cIndex;  </span><br><span class="line">   <span class="keyword">for</span> (cIndex <span class="keyword">in</span> topicLists) &#123;  </span><br><span class="line">     <span class="keyword">var</span> category = xml.ele(<span class="string">"category"</span>);  </span><br><span class="line">     category.att(<span class="string">"title"</span>, topicLists[cIndex]);  </span><br><span class="line">     category.att(<span class="string">"description"</span>, topicLists[cIndex]);  </span><br><span class="line">   </span><br><span class="line">     <span class="keyword">var</span> catLeaf = category.ele(<span class="string">"categoryLeaf"</span>);  </span><br><span class="line">     catLeaf.att(<span class="string">"title"</span>, topicLists[cIndex]);  </span><br><span class="line">     catLeaf.att(<span class="string">"description"</span>, topicLists[cIndex]);  </span><br><span class="line">     catLeaf.att(<span class="string">"feed"</span>, appBaseURL + <span class="string">"Ch9/"</span> + topicLists[cIndex] + <span class="string">"/List/"</span>);  </span><br><span class="line">   &#125;  </span><br><span class="line">   xml.end(&#123; <span class="attr">pretty</span>: <span class="literal">true</span> &#125;);  </span><br><span class="line">   callback(xml.toString());  </span><br><span class="line"> &#125;  </span><br><span class="line">   </span><br><span class="line"> exports.Ch9List = <span class="function"><span class="keyword">function</span> (<span class="params">topic, callback</span>) </span>&#123;  </span><br><span class="line">   <span class="keyword">var</span> xml;  </span><br><span class="line">   request(ch9BaseURL + topic + <span class="string">'/rss?sort=recent'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">error, response, html</span>) </span>&#123;  </span><br><span class="line">     <span class="keyword">if</span> (!error &amp;&amp; response.statusCode == <span class="number">200</span>) &#123;  </span><br><span class="line">       <span class="keyword">var</span> $ = cheerio.load(html, &#123; <span class="attr">ignoreWhitespace</span>: <span class="literal">true</span>, <span class="attr">xmlMode</span>: <span class="literal">true</span> &#125;);  </span><br><span class="line">       xml = builder.create(<span class="string">'categories'</span>);  </span><br><span class="line">       <span class="keyword">var</span> currIndex = <span class="number">0</span>;  </span><br><span class="line">       $(<span class="string">'item'</span>).each(<span class="function"><span class="keyword">function</span> (<span class="params">i, element</span>) </span>&#123;  </span><br><span class="line">         <span class="keyword">var</span> category = xml.ele(<span class="string">"category"</span>);  </span><br><span class="line">         category.att(<span class="string">"title"</span>, $(element).find(<span class="string">'title'</span>).text());  </span><br><span class="line">         category.att(<span class="string">"description"</span>, $(element).find(<span class="string">'description'</span>).text());  </span><br><span class="line">   </span><br><span class="line">         <span class="keyword">var</span> catLeaf = category.ele(<span class="string">"categoryLeaf"</span>);  </span><br><span class="line">         catLeaf.att(<span class="string">"title"</span>, $(element).find(<span class="string">'title'</span>).text());  </span><br><span class="line">         catLeaf.att(<span class="string">"description"</span>, $(element).find(<span class="string">'description'</span>).text());  </span><br><span class="line">         catLeaf.att(<span class="string">"feed"</span>, appBaseURL + <span class="string">"Ch9/"</span> + topic + <span class="string">"/"</span> + <span class="built_in">encodeURIComponent</span>($(element).find(<span class="string">'title'</span>).text()) + <span class="string">"/View/"</span>);  </span><br><span class="line">         currIndex++;  </span><br><span class="line">       &#125;);  </span><br><span class="line">   </span><br><span class="line">       xml.end(&#123; <span class="attr">pretty</span>: <span class="literal">true</span> &#125;);  </span><br><span class="line">       callback(xml.toString());  </span><br><span class="line">     &#125;  </span><br><span class="line">   &#125;);  </span><br><span class="line"> &#125;  </span><br><span class="line">   </span><br><span class="line"> exports.Ch9View = <span class="function"><span class="keyword">function</span> (<span class="params">topic, title, callback</span>) </span>&#123;  </span><br><span class="line">   <span class="keyword">var</span> xml;  </span><br><span class="line">   request(ch9BaseURL + topic + <span class="string">'/rss?sort=recent'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">error, response, html</span>) </span>&#123;  </span><br><span class="line">     <span class="keyword">if</span> (!error &amp;&amp; response.statusCode == <span class="number">200</span>) &#123;  </span><br><span class="line">       <span class="keyword">var</span> $ = cheerio.load(html, &#123; <span class="attr">ignoreWhitespace</span>: <span class="literal">true</span>, <span class="attr">xmlMode</span>: <span class="literal">true</span> &#125;);  </span><br><span class="line">       <span class="keyword">var</span> curElement = $(<span class="string">'item'</span>).filter(<span class="function"><span class="keyword">function</span> (<span class="params">i, el</span>) </span>&#123;  </span><br><span class="line">         <span class="keyword">return</span> $(<span class="keyword">this</span>).find(<span class="string">'title'</span>).text() === title;  </span><br><span class="line">       &#125;);  </span><br><span class="line">       <span class="keyword">var</span> feedURL = $(curElement).find(<span class="string">'c9\\:feed'</span>).text();  </span><br><span class="line">       <span class="keyword">if</span> (!feedURL)  </span><br><span class="line">         feedURL = $(curElement).find(<span class="string">'c9\\:feed'</span>).text() + <span class="string">"/Rss"</span>;  </span><br><span class="line">   </span><br><span class="line">       request(feedURL, <span class="function"><span class="keyword">function</span> (<span class="params">error, response, html</span>) </span>&#123;  </span><br><span class="line">         <span class="keyword">var</span> $ = cheerio.load(html, &#123; <span class="attr">ignoreWhitespace</span>: <span class="literal">true</span>, <span class="attr">xmlMode</span>: <span class="literal">true</span> &#125;);  </span><br><span class="line">         xml = builder.create(<span class="string">'feed'</span>);  </span><br><span class="line">         <span class="keyword">var</span> loopIndex = <span class="number">0</span>;  </span><br><span class="line">         $(<span class="string">'item'</span>).each(<span class="function"><span class="keyword">function</span> (<span class="params">i, element</span>) </span>&#123;  </span><br><span class="line">           <span class="keyword">var</span> url = $(element).find(<span class="string">'media\\:content'</span>).filter(<span class="function"><span class="keyword">function</span> (<span class="params">i, el</span>) </span>&#123;  </span><br><span class="line">             <span class="keyword">return</span> $(<span class="keyword">this</span>).attr(<span class="string">'url'</span>).includes(<span class="string">"_high"</span>);  </span><br><span class="line">           &#125;).attr(<span class="string">"url"</span>);  </span><br><span class="line">   </span><br><span class="line">           <span class="keyword">var</span> item = xml.ele(<span class="string">'item'</span>);  </span><br><span class="line">           item.att(<span class="string">'sdImg'</span>, $(<span class="keyword">this</span>).children(<span class="string">'media\\:thumbnail'</span>).attr(<span class="string">'url'</span>));  </span><br><span class="line">           item.att(<span class="string">'hdImg'</span>, $(<span class="keyword">this</span>).children(<span class="string">'media\\:thumbnail'</span>).attr(<span class="string">'url'</span>));  </span><br><span class="line">           item.att(<span class="string">'thumbnailURL'</span>, $(<span class="keyword">this</span>).children(<span class="string">'media\\:thumbnail'</span>).attr(<span class="string">'url'</span>));  </span><br><span class="line">           item.ele(<span class="string">'title'</span>, $(<span class="keyword">this</span>).children(<span class="string">'title'</span>).text());  </span><br><span class="line">           item.ele(<span class="string">'contentId'</span>, loopIndex);  </span><br><span class="line">           item.ele(<span class="string">'streamFormat'</span>, <span class="string">'mp4'</span>);  </span><br><span class="line">           <span class="keyword">var</span> media = item.ele(<span class="string">'media'</span>);  </span><br><span class="line">           media.ele(<span class="string">'streamUrl'</span>, url);  </span><br><span class="line">           media.ele(<span class="string">'thumbnailURL'</span>, $(<span class="keyword">this</span>).children(<span class="string">'media\\:thumbnail'</span>).attr(<span class="string">'url'</span>));  </span><br><span class="line">           loopIndex++;  </span><br><span class="line">         &#125;);  </span><br><span class="line">         xml.end(&#123; <span class="attr">pretty</span>: <span class="literal">true</span> &#125;);  </span><br><span class="line">         callback(xml.toString());  </span><br><span class="line">       &#125;);  </span><br><span class="line">     &#125;  </span><br><span class="line">   &#125;);  </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>Thats it. We have just implemented the web API using NodeJS with just few lines of code. if i run my application using <a href="http://localhost:4567/ch9" target="_blank" rel="noopener">http://localhost:4567/ch9</a>, it responds back with xml output.  </p><p>The deployment is super easy too. Just copy the folder excluding Node_Modules folder. You dont have to deploy the node_modules folder. You can run the NPM Update command to get the node_modules folder from PI Server after deploying it to save some deployment time.  </p><p>To run the App Server, just open the terminal from Raspian and run using the following command Node APP.js and your personal web server is ready to serve.  </p><p>I have modified the UrlCategoryFeed in categoryFeed.brs in the roku app before i deploy it. In order to deploy the roku dev app, just follow the <a href="https://sdkdocs.roku.com/display/sdkdoc/Loading+and+Running+Your+Application" target="_blank" rel="noopener">roku official guide</a> . Make sure You enable the development mode in roku before deploying it.  </p><p>Update : Roku recently updated their video channel sample app and the new app can be found <a href="https://github.com/rokudev/videoplayer-channel" target="_blank" rel="noopener">here</a>.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;I have a various streaming box (Apple TV, Roku, Fire TV, Nexus Player) because i prefer to watch video tutorials on TV rather than watching in laptop. However, we don’t have app for all the sites that provides video tutorials. For example, &lt;a href=&quot;https://channel9.msdn.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;MSDN channel9&lt;/a&gt; dont have app for any streaming boxes. So, i decided to use roku &lt;a href=&quot;https://sourceforge.net/p/rokusdkexamples/code/HEAD/tree/trunk/rokusdkexamples-code/videoplayer/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;sample video player app&lt;/a&gt; to play channel 9 videos on my roku. This app expects the video content defined in certain XML format.So, I just have to build the web APIs to return the XML output dynamically. I also prefer not to host the Web APIs on the internet. I just want to host it in my home network. So, i need a web server that will be always on so, decided to use my existing Raspberry PI 3 as a web server.  &lt;/p&gt;
    
    </summary>
    
    
      <category term="NodeJS" scheme="https://jeevasubburaj.com/tags/NodeJS/"/>
    
      <category term="Raspberry PI" scheme="https://jeevasubburaj.com/tags/Raspberry-PI/"/>
    
  </entry>
  
</feed>
